{"title":"OMNET++入门教程|第1章 —— TicToc模型","date":"2019-09-26T14:05:28.000Z","date_formatted":{"ll":"2019年9月26日","L":"2019/09/26","MM-DD":"09-26"},"link":"2019/09/26/omnet-ru-men-jiao-cheng-2","comments":true,"tags":["OMNET++","TicToc"],"categories":["OMNET++"],"updated":"2019-11-17T00:48:45.196Z","content":"<p><a href=\"https://docs.omnetpp.org/tutorials/tictoc/part1/\" target=\"_blank\">官方教程链接</a></p>\n<h1 id=\"omnet入门教程第1章--tictoc模型\">OMNET++入门教程|第1章 —— TicToc模型<a href=\"#omnet入门教程第1章--tictoc模型\" title=\"OMNET++入门教程|第1章 —— TicToc模型\"></a></h1><h2 id=\"1-模型\">1 模型<a href=\"#1-模型\" title=\"1 模型\"></a></h2><p>首先，让我们从一个由两个节点组成的“网络”开始。节点将做一些简单的事情：其中一个节点将创建一个数据包，两个节点将继续来回传递相同的数据包。我将调用节点tic和toc。稍后我们将逐步改进这个模型，在每个步骤中来引入OMNET++特性。</p>\n<p>以下是从零开始实现第一个模拟的步骤。</p>\n<h2 id=\"2-建立项目\">2 建立项目<a href=\"#2-建立项目\" title=\"2 建立项目\"></a></h2><p>首先打开OMNET++的主界面，在主菜单中选择 <em>File-&gt; New -&gt; OMNeT++ Project</em> </p>\n<p><img src=\"https://i.loli.net/2019/09/27/xKrMTzNh4eAZtWb.jpg\" class=\"cy\">\n然后会出现这个界面\n<img src=\"https://i.loli.net/2019/09/27/3tzclP761W2xTNv.jpg\" class=\"cy\">\nProject name输入TT（官方直接有一个tictoc，如果输入tictoc就直接进入它的例子了，这里我们尝试从头开始写），其他的保持默认即可，点击Next（<strong>别点错成Finish</strong>），在让你选择 <em>initial content</em>时，选择 <em>Empty project</em>，然后一路Next，最后无法选择Next时选择Finish。最后的效果如图\n<img src=\"https://i.loli.net/2019/09/27/NUyIA9vVSc5jhfg.jpg\" class=\"cy\"></p>\n<h2 id=\"3-添加ned文件\">3 添加NED文件<a href=\"#3-添加ned文件\" title=\"3 添加NED文件\"></a></h2><p>OMNeT ++使用NED文件来定义组件并将它们组装成更大的单元，例如网络。我们开始通过添加NED文件来实现我们的模型。要将文件添加到项目中，请在左侧的项目资源管理器面板中右键单击项目目录 ，然后从菜单中选择 <em>File-&gt; New -&gt; Network Description File (NED)</em>。下面的 <em>File name</em>输入tt.ned，然后点击Finish即可</p>\n<p><img src=\"https://i.loli.net/2019/09/27/8GVsEzim71RcJto.png\" class=\"cy\"></p>\n<p><img src=\"https://i.loli.net/2019/09/27/8s9RTVca4UGNfXz.png\" class=\"cy\"></p>\n<p>然后就可以开始构建网络了，切换到 <em>Source</em> 模式，然后输入以下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">simple Txc1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gates:</span><br><span class=\"line\">        input in;</span><br><span class=\"line\">        output out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Two instances (tic and toc) of Txc1 connected both ways.</span></span><br><span class=\"line\"><span class=\"comment\">// Tic and toc will pass messages to one another.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">network Tictoc1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    submodules:</span><br><span class=\"line\">        tic: Txc1;</span><br><span class=\"line\">        toc: Txc1;</span><br><span class=\"line\"></span><br><span class=\"line\">    connections:</span><br><span class=\"line\"></span><br><span class=\"line\">        tic.out --&gt; &#123;  delay = <span class=\"number\">100</span>ms; &#125; --&gt; toc.in;</span><br><span class=\"line\">        tic.in &lt;-- &#123;  delay = <span class=\"number\">100</span>ms; &#125; &lt;-- toc.out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/09/27/1PZGJVpD4ug5jcd.png\" class=\"cy\"></p>\n<p>然后切换回 <em>Design</em> 模式，就会看到类似如下的场景</p>\n<p><img src=\"https://i.loli.net/2019/09/27/Pf2wZY35xtbuicC.png\" class=\"cy\"></p>\n<p>那我们来看一下两块代码是什么意思</p>\n<p>首先，第一块定义了一个简单模块Txc1</p>\n<p>第二块定义了一个复合模块(类型) Tictoc1,其中包含子模块tic和toc,它们都是简单模块类型Txc1的实例。Tic的输出门(out)连接到toc的输入门(in),Toc的输出门(out)连接到tic的输入门(in) ,传输延迟均为100ms。</p>\n<h2 id=\"4-添加c文件\">4 添加C++文件<a href=\"#4-添加c文件\" title=\"4 添加C++文件\"></a></h2><p>现在，我们需要在C++中实现Txc1简单模块的功能。从项目的菜单中选择 <em>File -&gt; Other</em>,然后在下面的选择栏里选择 <em>C/C++ -&gt; Source File</em> ，创建一个名为txc1.cc的文件，并输入以下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;omnetpp.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> omnetpp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Derive the Txc1 class from cSimpleModule. In the Tictoc1 network,</span></span><br><span class=\"line\"><span class=\"comment\"> * both the `tic' and `toc' modules are Txc1 objects, created by OMNeT++</span></span><br><span class=\"line\"><span class=\"comment\"> * at the beginning of the simulation.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Txc1</span> :</span> <span class=\"keyword\">public</span> cSimpleModule</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"comment\">// The following redefined virtual function holds the algorithm.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(cMessage *msg)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The module class needs to be registered with OMNeT++</span></span><br><span class=\"line\">Define_Module(Txc1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Txc1::initialize</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize is called at the beginning of the simulation.</span></span><br><span class=\"line\">    <span class=\"comment\">// To bootstrap the tic-toc-tic-toc process, one of the modules needs</span></span><br><span class=\"line\">    <span class=\"comment\">// to send the first message. Let this be `tic'.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Am I Tic or Toc?</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//仿真初始化，由节点tic发出第一条消息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(<span class=\"string\">\"tic\"</span>, getName()) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// create and send first message on gate \"out\". \"tictocMsg\" is an</span></span><br><span class=\"line\">        <span class=\"comment\">// arbitrary string which will be the name of the message object.</span></span><br><span class=\"line\">        <span class=\"comment\">//创建输出门“out”发出第一条消息\"tictocMsg\"，不过发的啥这里并不关心</span></span><br><span class=\"line\">        cMessage *msg = <span class=\"keyword\">new</span> cMessage(<span class=\"string\">\"tictocMsg\"</span>);</span><br><span class=\"line\">        send(msg, <span class=\"string\">\"out\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Txc1::handleMessage</span><span class=\"params\">(cMessage *msg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// The handleMessage() method is called whenever a message arrives</span></span><br><span class=\"line\">    <span class=\"comment\">// at the module. Here, we just send it to the other module, through</span></span><br><span class=\"line\">    <span class=\"comment\">// gate `out'. Because both `tic' and `toc' does the same, the message</span></span><br><span class=\"line\">    <span class=\"comment\">// will bounce between the two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    send(msg, <span class=\"string\">\"out\"</span>); <span class=\"comment\">// send out the message</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/09/27/bOmDvLfCaF3KBlI.png\" class=\"cy\">\n<img src=\"https://i.loli.net/2019/09/27/ItZmzQnHFPgYpE6.png\" class=\"cy\">\n<img src=\"https://i.loli.net/2019/09/27/5gGz376LDIKbBaX.png\" class=\"cy\"></p>\n<p>根据 NED 文件中定义的字模块关系，<em>initialize()</em> 函数中节点 tic 从输出门“out”发出的消息经过 100ms 传输延迟必然到达节点 toc的输入门“tic”，并触发其 <em>handleMessage()</em> 函数。 不难看出该消息就像一只乒乓球，将在两个节点间来回传输。不过请注意，此模拟中没有内置停止条件：它将永远持续。你可以在IDE上让它停止运行。</p>\n<h2 id=\"5-配置omnetppini\">5 配置omn​​etpp.ini<a href=\"#5-配置omnetppini\" title=\"5 配置omn​​etpp.ini\"></a></h2><p>为了能够运行模拟，我们需要创建<code>omnetpp.ini</code>文件。<code>omnetpp.ini</code>告诉仿真程序要模拟哪个网络（因为ned文件可能包含多个网络），可以将参数传递给模型，显式指定随机数生成器的种子等。</p>\n<p>从菜单里选择 <em>File -&gt; New -&gt; Initialization file (INI)</em> 创建<code>omnetpp.ini</code>文件。新文件将在IniFile编辑器中打开。作为ned编辑器，inifile编辑器还有两种模式，<em>Form</em>和<em>Source</em>，用于编辑相同的内容。前者更适合配置仿真内核，后者更适合输入模块参数。</p>\n<p>现在，只需切换到 <em>Source</em> 模式并输入以下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[General]</span><br><span class=\"line\">network &#x3D; Tictoc1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/09/27/ZHyoesIrKWSPMjt.png\" class=\"cy\">\n<img src=\"https://i.loli.net/2019/09/27/hHW5ISEtoTdCa3v.png\" class=\"cy\"></p>\n<p>点击 <em>Run</em> 或使用快捷键 <code>Ctrl+F11</code> 运行，可能弹出两个提示框，不用管他，直接运行即可，最后会弹出一个窗口来显示仿真结果，效果如图。</p>\n<p><img src=\"https://i.loli.net/2019/09/27/b8Bhryno1U5luvL.gif\" class=\"cy\"></p>\n<p>下一节我会着重讲一下模拟的过程。就说到这里吧，有什么问题大家可以通过评论区联系我。</p>\n","prev":{"title":"利用jsDelivr和Cloudflare免备案加速Github Pages网站","link":"2019/09/30/加速Github-Pages网站"},"next":{"title":"OMNET++入门教程|第0章——安装","link":"2019/09/24/omnet-ru-men-jiao-cheng"},"plink":"https://gwliang.com/2019/09/26/omnet-ru-men-jiao-cheng-2/","toc":[{"id":"omnet入门教程第1章--tictoc模型","title":"OMNET++入门教程|第1章 —— TicToc模型","index":"1","children":[{"id":"1-模型","title":"1 模型","index":"1.1"},{"id":"2-建立项目","title":"2 建立项目","index":"1.2"},{"id":"3-添加ned文件","title":"3 添加NED文件","index":"1.3"},{"id":"4-添加c文件","title":"4 添加C++文件","index":"1.4"},{"id":"5-配置omnetppini","title":"5 配置omn​​etpp.ini","index":"1.5"}]}],"reward":true,"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名(<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","author":"Gaowan Liang","link":"<a href=\"https://gwliang.com/2019/09/26/omnet-ru-men-jiao-cheng-2/\" title=\"OMNET++入门教程|第1章 —— TicToc模型\">https://gwliang.com/2019/09/26/omnet-ru-men-jiao-cheng-2/</a>"}}