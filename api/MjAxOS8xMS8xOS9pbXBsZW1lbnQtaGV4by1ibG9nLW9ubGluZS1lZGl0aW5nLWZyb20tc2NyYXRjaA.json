{"title":"从零开始实现hexo博客的在线编辑","date":"2019-11-19T01:18:16.000Z","date_formatted":{"ll":"2019年11月19日","L":"2019/11/19","MM-DD":"11-19"},"link":"2019/11/19/implement-hexo-blog-online-editing-from-scratch","comments":true,"categories":["博客"],"updated":"2020-05-11T11:20:38.324Z","content":"<p>⚠ 本教程需要服务器（VPS），Serverless版本正在探索，请大家耐心等待</p>\n<h1 id=\"前言\">前言<a href=\"#前言\" title=\"前言\"></a></h1><p>我今年五月参加的微信小程序开发赛获得了全国三等奖，微信赠了我1k的优惠券\n<img src=\"https://i.loli.net/2019/11/19/4RsvXH2zO8mJn5w.png\" class=\"cy\">\n<img src=\"https://i.loli.net/2019/11/19/gW7O9TXAD1PMZiY.png\" class=\"cy\">\n不过这个优惠券只能购买没有优惠过的服务器，所以1k优惠券也是了了，最后在我的精打细算下，买了一年零三个月的服务器。买来不能闲置着不用啊，于是我准备构建一个在线写hexo的平台，这样就可以摆脱平台的束缚，在任意环境下都可以进行写作了。由于这个服务器是新购置的，所以我从零开始写一下相关的内容。</p>\n<h1 id=\"配置相关环境\">配置相关环境<a href=\"#配置相关环境\" title=\"配置相关环境\"></a></h1><h2 id=\"nignxnginx比较麻烦，下面更新caddy的\"><del>Nignx</del>(Nginx比较麻烦，下面更新caddy的)<a href=\"#nignxnginx比较麻烦，下面更新caddy的\" title=\"Nignx(Nginx比较麻烦，下面更新caddy的)\"></a></h2><p>配置Nignx是关键，虽然很俗，但是这个活不能不干。其实也可以有很多选择，比如Caddy，<del>Apache</del>（这年头个人搭建网站还有人用Apache吗，配置巨麻烦）</p>\n<p>Debian apt 自带的 Nginx 太老，可以通过更新源的方式来解决</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> deb http://nginx.org/packages/debian/ stretch nginx | sudo tee /etc/apt/sources.list.d/nginx.list</span><br><span class=\"line\">wget http://nginx.org/keys/nginx_signing.key &amp;&amp; sudo apt-key add nginx_signing.key </span><br><span class=\"line\">sudo apt update &amp;&amp; apt install nginx -y</span><br></pre></td></tr></table></figure>\n\n<p>到这一部分就完成了最新稳定版的 Nginx 的安装。需要注意的是，这一步安装的 Nginx 和系统自带的 Nginx 的配置目录略有区别，可以用一下几个简单的命令修正：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/nginx/&#123;sites-available,sites-enabled&#125;</span><br><span class=\"line\">sudo mv /etc/nginx/conf.d/* /etc/nginx/sites-available</span><br><span class=\"line\">sudo rmdir -f /etc/nginx/conf.d/</span><br><span class=\"line\">sudo perl -pi -e <span class=\"string\">'s/conf.d/sites-enabled/g'</span> /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>当然这个没必要，我就没弄</p>\n<p>最后出现这个就是成功了\n<img src=\"https://i.loli.net/2019/11/19/fWvASTeK84U6xLa.png\" class=\"cy\"></p>\n<h2 id=\"caddy\">Caddy<a href=\"#caddy\" title=\"Caddy\"></a></h2><p><code>Caddy</code>是一个极简的<code>HTTP</code>服务器，支持<code>HTTP/2</code>静态网页服务器，安装也很快，在很多方面都可以不用安装时间很长的<code>lnmp</code>，<code>lamp</code>环境了，配置文件也很简单，同时还有一些有趣的扩展，可以非常方便的搭建一个<code>HTTP</code>服务器。</p>\n<p>可以直接用下面的脚本进行安装，国内主机安装较慢，耐心等一下就好了</p>\n<p><strong>系统要求：</strong><code>CentOS 6+</code>/<code>Debian 6+</code>/<code>Ubuntu 14.04 +</code>。</p>\n<p>本脚本只是一个一键安装+运行控制的脚本，没有其他管理虚拟主机等功能。</p>\n<p>执行下面的代码安装<code>Caddy</code>，如果想要安装其他扩展可以把名字加到命令后面（<code>bash caddy_install.sh install xxx,xxx,xxx，</code>扩展列表<a href=\"https://caddyserver.com/download\" target=\"_blank\">点击查看</a>）。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br><span class=\"line\">#备用地址</span><br><span class=\"line\">wget -N --no-check-certificate https:&#x2F;&#x2F;gwliang.com&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用说明\">使用说明<a href=\"#使用说明\" title=\"使用说明\"></a></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：&#x2F;etc&#x2F;init.d&#x2F;caddy start</span><br><span class=\"line\">停止：&#x2F;etc&#x2F;init.d&#x2F;caddy stop</span><br><span class=\"line\">重启：&#x2F;etc&#x2F;init.d&#x2F;caddy restart</span><br><span class=\"line\">查看状态：&#x2F;etc&#x2F;init.d&#x2F;caddy status</span><br><span class=\"line\">查看Caddy启动日志：tail -f &#x2F;tmp&#x2F;caddy.log</span><br><span class=\"line\">安装目录：&#x2F;usr&#x2F;local&#x2F;caddy</span><br><span class=\"line\">Caddy配置文件位置：&#x2F;usr&#x2F;local&#x2F;caddy&#x2F;Caddyfile</span><br><span class=\"line\">Caddy自动申请SSL证书位置：&#x2F;.caddy&#x2F;acme&#x2F;acme-v01.api.letsencrypt.org&#x2F;sites&#x2F;xxx.xxx(域名)&#x2F;</span><br></pre></td></tr></table></figure>\n<p>等会会教大家如何配置</p>\n<h2 id=\"nodejs\">NodeJS<a href=\"#nodejs\" title=\"NodeJS\"></a></h2><p>NodeJS是最重要的，没有Nginx也得有NodeJS，这是我们写博客的关键，Debian自带的NodeJS还是比较老的，推荐用 <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\">nvm</a> 安装</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>然后<strong>关闭再打开终端</strong>，就可以用了</p>\n<p>我目前NodeJS最新版是12.13.0，输入</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 12.13.0</span><br></pre></td></tr></table></figure>\n<p>就安装了NodeJS 12.13.0版本</p>\n<p><img src=\"https://i.loli.net/2019/11/19/CN5elIwdTfQYVmZ.png\" class=\"cy\"></p>\n<h2 id=\"git\">git<a href=\"#git\" title=\"git\"></a></h2><p>git 直接用 apt 安装就行了，这个不再赘述。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"工作区配置\">工作区配置<a href=\"#工作区配置\" title=\"工作区配置\"></a></h1><h2 id=\"把你的博客源文件上传github\">把你的博客源文件上传Github<a href=\"#把你的博客源文件上传github\" title=\"把你的博客源文件上传Github\"></a></h2><p>为了多端同步，也为了防止服务器不好上传你的文件，这个时候就需要将你的博客的源文件文件上传到GitHub，由于Hexo会吃掉你博客的master分支，这个时候就需要先创建一个分支。在你博客源文件的文件夹下打开Git bash，输入下面的命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b inside</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个inside分支，因为我这个博客的主题就是inside。然后<code>git push</code>到GitHub上，本地这边的工作就完成了。</p>\n<h2 id=\"在服务器上把你的源代码clone下来\">在服务器上把你的源代码clone下来<a href=\"#在服务器上把你的源代码clone下来\" title=\"在服务器上把你的源代码clone下来\"></a></h2><p>由于服务器是全新的，我就按全新的来说，首先输入下面命令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"你GitHub的用户名\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"你GitHub注册时用的邮箱\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"你GitHub注册时用的邮箱\"</span></span><br></pre></td></tr></table></figure>\n<p>默认回车即可，然后输入<code>cat /root/.ssh/id_rsa.pub</code>，然后把输出的东西整个复制出来\n<img src=\"https://cdn.jsdelivr.net/gh/gaowanliang/p/img/20191127204816.png\" class=\"cy\">\n打开<a href=\"https://github.com\" target=\"_blank\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，Title随便。</p>\n<p>把刚才输出的一串复制到key里即可</p>\n<p>输入<code>ssh -T git@github.com</code>，问Are you sure you want to continue connecting (yes/no)?时输入yes，如果出现你的用户名，那就成功了。</p>\n<p>然后在服务器上clone一下你新建的分支，通过<code>-b</code>选择分支，例如</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b inside https://github.com/gaowanliang/gaowanliang.github.io.git</span><br></pre></td></tr></table></figure>\n<p>(要按照自己的实际情况来)</p>\n<h2 id=\"安装code-server\">安装Code-server<a href=\"#安装code-server\" title=\"安装Code-server\"></a></h2><p>众所周知，Visual Studio Code 是基于 Electron 的，而Electron 又是一个“双头怪”——基于 Web 技术的桌面应用平台。但在最近，Coder 的开发者最近做了有趣的尝试，让我们可以把整个 VSCode 放到浏览器中去运行。而VSCode写markdown的体验也是很舒服的，为了不用自己写一个网页来搞一些复杂的配置，直接用浏览器版的Vscode就很舒服，而且还能应急改其他代码，那我们就简单配置一下。</p>\n<p>首先在下列网址下载最新版code-server</p>\n<blockquote>\n<p><a href=\"https://github.com/cdr/code-server/releases\" target=\"_blank\">https://github.com/cdr/code-server/releases</a></p>\n</blockquote>\n<p>下载好后上传到你的服务器，或者直接用wget下载。之后cd到下载目录，执行下面的代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /opt -xzvf code-server-xxx.tar.gz  // 根据具体的名字来解压</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\">mv code-server*4 code-server</span><br><span class=\"line\"><span class=\"built_in\">cd</span> code-server</span><br><span class=\"line\">./code-server</span><br></pre></td></tr></table></figure>\n<p>然后就会出现这样的场景，证明你的服务器可以用，但是不能保证正确运行，还得测试一下</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/20/8ciU3Q.png\" class=\"cy\"></p>\n<p>按下Ctrl+C停止服务，接着执行下面的命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./code-server --host 0.0.0.0 --port 9900</span><br></pre></td></tr></table></figure>\n\n<p>之后打开你的IP:9900，如果出现需要你输入密码的界面，说明没啥问题，密码如果你没配置过，会显示在服务器控制台里。(如果是部分服务商，需要在后台开放端口)</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/20/8cEi8O.png\" class=\"cy\"></p>\n<p>输入密码，进入界面，第一次进入要等很久</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/20/8cEbdI.png\" class=\"cy\"></p>\n<p>和VSCode几乎一模一样，有内味了。由于这个code-server是完全独立于系统的，所以你需要重新安装一下nodejs。当然在安装之前，要先安装一下中文汉化包。由于这个自带的插件商店是残废版，很多插件都没有，需要你自己去下载离线版.vsix安装，安装之前，需要看一下VSCode的版本，点击左上角的三个横杠-Help-About，可以看到version显示的版本，我这里是1.42.0，然后去商店下载离线汉化包，进入 <a href=\"https://marketplace.visualstudio.com/\" target=\"_blank\">https://marketplace.visualstudio.com/</a> ，搜索Chinese，然后会出来Chinese (Simplified) Language Pack for Visual Studio Code这个，点进去，找到右边的Download Extension，点一下，获取一下下载连接，我获取到的下载链接是 <a href=\"https://marketplace.visualstudio.com/_apis/public/gallery/publishers/MS-CEINTL/vsextensions/vscode-language-pack-zh-hans/1.43.9/vspackage\" target=\"_blank\">https://marketplace.visualstudio.com/_apis/public/gallery/publishers/MS-CEINTL/vsextensions/vscode-language-pack-zh-hans/1.43.9/vspackage</a> 可以看到最新版本已经是 1.43.9 了，我们把下载链接里的那个版本号改成适用于你VSCode的版本号，比如我就是1.42.0，所以下载链接就改成 <a href=\"https://marketplace.visualstudio.com/_apis/public/gallery/publishers/MS-CEINTL/vsextensions/vscode-language-pack-zh-hans/1.42.0/vspackage\" target=\"_blank\">https://marketplace.visualstudio.com/_apis/public/gallery/publishers/MS-CEINTL/vsextensions/vscode-language-pack-zh-hans/1.42.0/vspackage</a> 。下载好后，传到服务器里</p>\n<p>回到网页，打开插件列表，选Install VSIX</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/20/8cmW0H.png\" class=\"cy\"></p>\n<p>找到上传的地址，安装即可\n之后点一下右下角的YES即可，之后等待刷新完成，就是中文了\n<img src=\"https://s1.ax1x.com/2020/03/20/8cKAYR.png\" class=\"cy\" alt=\"8cKAYR.png\"></p>\n<p>按下Ctrl+J，打开终端，第一次打开要选一下默认终端的类型，按照图中的方法操作，最后在弹出的框中选择Bash即可。</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/20/8cKHc6.png\" class=\"cy\" alt=\"8cKHc6.png\"></p>\n<p>之后按照上面的操作，在这个终端里安装一下nodejs和导入一下GitHub的信息，只不过不用再生成SSH密钥了（<code>ssh-keygen</code>和<code>cat</code>这两个命令不用了，也不用导入密钥了），但是git config命令要改成这样</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system user.name <span class=\"string\">\"你GitHub的用户名\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --system user.email <span class=\"string\">\"你GitHub注册时用的邮箱\"</span></span><br></pre></td></tr></table></figure>\n\n<p>之后选择左上角三个横杠-文件-打开文件夹，打开你clone的博客的目录</p>\n<p>之后要在终端里npm install，由于我是国内服务器，就用cnpm install了（要使用cnpm的话，要执行一下<code>npm install -g cnpm</code>）</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/20/8c3ndU.png\" class=\"cy\"></p>\n<p>之后执行一下<code>npm install -g hexo-cli</code>，就可以愉快的使用<code>hexo g &amp;&amp; hexo d</code> 了</p>\n<h2 id=\"配置systemctl\">配置systemctl<a href=\"#配置systemctl\" title=\"配置systemctl\"></a></h2><p>先在服务器终端按下Ctrl+C停止服务，然后执行下面的命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/systemd/system/code.service &lt;&lt;EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Code Server NO.1</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">EnvironmentFile=/opt/code-server/.envfile</span><br><span class=\"line\">WorkingDirectory=/opt/code-server/</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=10</span><br><span class=\"line\"></span><br><span class=\"line\">ExecStart=/opt/code-server/code-server --host 0.0.0.0 --port 9900</span><br><span class=\"line\">StandardOutput=file:/opt/code-server/output/output.log</span><br><span class=\"line\">StandardError=file:/opt/code-server/error/error.log</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target </span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>之后要配置一下默认密码，也是执行下面的命令（将gaowanliang改成你自己的密码）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASSWORD&#x3D;gaowanliang</span><br><span class=\"line\">echo &quot;PASSWORD&#x3D;\\&quot;$&#123;PASSWORD&#125;\\&quot;&quot; &gt; &#x2F;opt&#x2F;code-server&#x2F;.envfile</span><br></pre></td></tr></table></figure>\n<p>之后执行下面两条命令，实现后台运行和开机自启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable code</span><br><span class=\"line\">systemctl start code</span><br></pre></td></tr></table></figure>\n<p>现在可以直接打开你的IP:9900，输入你自己设置的密码，这样关闭服务器终端也不会停止了</p>\n<h2 id=\"配置域名可选\">配置域名(可选)<a href=\"#配置域名可选\" title=\"配置域名(可选)\"></a></h2><p>如果你有自己的域名，可以绑上一个域名，就不用每次都输IP和端口了，执行下面的命令（将所有code.gwliang.com改成你自己的域名）\n这里使用的是<code>Caddy</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 下面两个二者选其一</span><br><span class=\"line\">// 不需要HTTPS</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"http://code.gwliang.com &#123;</span></span><br><span class=\"line\"><span class=\"string\">  gzip</span></span><br><span class=\"line\"><span class=\"string\">  proxy / 127.0.0.1:9900</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span> &gt; /usr/<span class=\"built_in\">local</span>/caddy/Caddyfile</span><br><span class=\"line\"></span><br><span class=\"line\">//需要HTTPS，其中 admin@gwliang.com 改成你自己的邮箱</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"code.gwliang.com &#123;</span></span><br><span class=\"line\"><span class=\"string\">  gzip</span></span><br><span class=\"line\"><span class=\"string\">  tls admin@gwliang.com</span></span><br><span class=\"line\"><span class=\"string\">  proxy / 127.0.0.1:9900</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span> &gt; /usr/<span class=\"built_in\">local</span>/caddy/Caddyfile</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>\n<p>打开你自己的域名，就可以正常使用了。</p>\n<h1 id=\"后记\">后记<a href=\"#后记\" title=\"后记\"></a></h1><p>图片的话不太好上传，直接用在线图床即可，推荐两个</p>\n<blockquote>\n<p>路过图床 <a href=\"https://imgchr.com/\" target=\"_blank\">https://imgchr.com/</a></p>\n</blockquote>\n<blockquote>\n<p>sm.ms <a href=\"https://sm.ms/\" target=\"_blank\">https://sm.ms/</a></p>\n</blockquote>\n<p>用qq自带的截图，截好之后直接Ctrl+V可以直接上传到网页上，然后下面都会给出Markdown的引用方式，直接引用即可</p>\n","prev":{"title":"使用 Go 语言实现一个云剪切板（未开始）","link":"2019/11/22/yong-go-shi-xian-yi-ge-yun-jian-qie-ban"},"next":{"title":"Cloudflare Worker+jsproxy实现浏览器代理","link":"2019/11/04/Cloudflare_Worker_jsproxy"},"plink":"https://gwliang.com/2019/11/19/implement-hexo-blog-online-editing-from-scratch/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"配置相关环境","title":"配置相关环境","index":"2","children":[{"id":"nignxnginx比较麻烦，下面更新caddy的","title":"Nignx(Nginx比较麻烦，下面更新caddy的)","index":"2.1"},{"id":"caddy","title":"Caddy","index":"2.2","children":[{"id":"使用说明","title":"使用说明","index":"2.2.1"}]},{"id":"nodejs","title":"NodeJS","index":"2.3"},{"id":"git","title":"git","index":"2.4"}]},{"id":"工作区配置","title":"工作区配置","index":"3","children":[{"id":"把你的博客源文件上传github","title":"把你的博客源文件上传Github","index":"3.1"},{"id":"在服务器上把你的源代码clone下来","title":"在服务器上把你的源代码clone下来","index":"3.2"},{"id":"安装code-server","title":"安装Code-server","index":"3.3"},{"id":"配置systemctl","title":"配置systemctl","index":"3.4"},{"id":"配置域名可选","title":"配置域名(可选)","index":"3.5"}]},{"id":"后记","title":"后记","index":"4"}],"reward":true,"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名(<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","author":"Gaowan Liang","link":"<a href=\"https://gwliang.com/2019/11/19/implement-hexo-blog-online-editing-from-scratch/\" title=\"从零开始实现hexo博客的在线编辑\">https://gwliang.com/2019/11/19/implement-hexo-blog-online-editing-from-scratch/</a>"}}